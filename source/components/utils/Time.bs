import "pkg:/components/utils/Logger.bs"

namespace time
    ' Return the current Epoch time in milliseconds
    function now()
        return createObject("roDateTime").asSeconds()
    end function

    function fromISO8601String(iso8601String)
        if iso8601String = invalid
            return invalid
        end if
        date = createObject("roDateTime")
        date.FromISO8601String(iso8601String)
        ' Manually figure out timezone stuff, because roku is dumb
        timezoneOffsetSeconds = _getTimezoneOffsetSeconds(iso8601String)
        date.fromSeconds(date.asSeconds() + timezoneOffsetSeconds)
        ' Call once to offset the current time in the date object according to the system clock
        date.toLocalTime()
        return date
    end function

    ' date.FromISO8601String() assumes the string is in UTC, so we need to manually calculate the timezone offset
    function _getTimezoneOffsetSeconds(isoString)
        if isoString.len() < 24
            Logger.log(`ISO 8601 without timezone indicator`)
            return 0
        end if

        timezoneIndicator = isoString.mid(23, 1)
        if timezoneIndicator = "Z"
            ' isoString is in UTC, no need to update anything
            return 0
        else if timezoneIndicator <> "+" and timezoneIndicator <> "-"
            Logger.log(`Invalid time zone indicator: '${timezoneIndicator}'`)
            return 0
        end if

        offset = isoString.mid(24).replace(":", "")
        hours = offset.left(2).toInt()
        minutes = offset.right(2).toInt()

        offsetSeconds = (hours * 3600) + (minutes * 60)
        if timezoneIndicator = "+"
            offsetSeconds *= -1
        end if
        return offsetSeconds
    end function

    ' Creates and starts a [Timer].
    ' [callback] can be either a string function name or direct reference to a function.
    ' Returns: the created Timer object, which can be stopped/restarted if you need more control over it.
    function setTimer(callback as dynamic, duration as float, repeat = false as boolean)
        timer = createObject("roSGNode", "Timer")
        timer.id = createObject("roDeviceInfo").getRandomUUID()
        timer.duration = duration
        timer.repeat = repeat
        ' Save a reference to the callback to trigger later
        if type(callback) = "roFunction" or type(callback) = "Function" then
            callback = callback.toStr().tokenize(" ").peek()
        end if
        timer.observeFieldScoped("fire", callback)
        timer.control = "start"
        timer.observeFieldScoped("control", "time__internal_timer_control_change")
        ' Temporarily put Timer in m so it doesn't get GC before triggering
        m[`_timer_${timer.id}`] = timer
        return timer
    end function

    sub _internal_timer_control_change(message)
        timer = message.getRoSGNode()
        if timer.control = "stop"
            ' Once the timer is stopped once, it's no longer our concern.
            ' Whoever called [setTimer] might still be using it, but it's their job to keep it from GC now.
            timer.unobserveFieldScoped("control")
            ' Clean up timer from m
            m.delete(`_timer_${timer.id}`)
        end if
    end sub
end namespace
