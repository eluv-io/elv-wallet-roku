import "pkg:/components/utils/RouterUtils.bs"
import "pkg:/components/utils/Toast.bs"
import "pkg:/components/utils/UrlUtil.bs"
import "pkg:/components/utils/OfferOps.bs"

namespace NftOps

    enum MediaType
        ' Fabric gives capitalized media types. A lot of checks would break if this assumption changes.
        AUDIO = "Audio"
        EBOOK = "Ebook"
        GALLERY = "Gallery"
        HTML = "HTML"
        IMAGE = "Image"
        LIVE = "Live Video"
        VIDEO = "Video"
    end enum

    function nftsToContentNode(nfts, rootNode = createObject("roSGNode", "ContentNode"), contentType = "nft") as roSGNode
        for each nft in nfts
            node = rootNode.createChild("MediaNode")
            node.contentType = contentType
            template = nft.nft_template
            node.sourceNft = nft
            node.key = template.id
            node.contractAddress = template.address
            node.imageUrl = nft.meta.image
            node.title = nft._name
            node.subtitle = template.edition_name
            node.description = template.description
            node.tokenId = nft.token_id_str
        end for
        return rootNode
    end function

    ' Create ContentNodes under [rootNode] for every media item.
    sub mediaItemsToNodes(mediaItems, rootNode, itemHeight, usePosterImage = false)
        for each item in mediaItems
            _nodeForItem(item, rootNode, itemHeight, "media", usePosterImage)
        end for
    end sub

    ' Create ContentNodes under [rootNode] for every redeemable offer that should not be hidden.
    sub offersToNodes(offers, rootNode, itemHeight)
        for each item in offers
            if not OfferOps.shouldHideOffer(item)
                _nodeForItem(item, rootNode, itemHeight, "offer", false)
            end if
        end for
    end sub

    ' Works for both MediaItems and RedeemableOffers
    sub _nodeForItem(item, rootNode, itemHeight, contentType, usePosterImage)
        ' First create the node with no relation to [rootNode],
        ' give it all the values it needs and only then attach it to [rootNode].
        ' Otherwise, if we're adding to a node that's already attached to a grid/list,
        ' the component will get the callback before any of the data is set.
        node = createObject("roSGNode", "AAContentNode")
        node.aa = item

        node.addField("contentType", "string", false)
        node.contentType = contentType

        if usePosterImage and item.poster_image <> invalid
            aspectRatio = 2 / 3
            node.FHDPosterUrl = UrlUtil.assetLinkToUrl(item.poster_image)
        else
            ' RedeemableOffers won't have this, so they'll default to 1x1 ratio.
            aspectRatio = lcase(item.image_aspect_ratio ?? "") = "wide" ? 16 / 9 : 1
            node.FHDPosterUrl = item.image
        end if

        node.addField("FHDItemWidth", "float", false)
        node.FHDItemWidth = itemHeight * aspectRatio

        ' Now it's safe to reparent the node
        node.reparent(rootNode, false)
    end sub

    sub launchMediaOrOffer(mediaItem)
        if mediaItem.media_type = NftOps.MediaType.VIDEO or mediaItem.media_type = NftOps.MediaType.LIVE
            videoPlayerView = CreateObject("roSGNode", "VideoPlayer")
            videoPlayerView.videoItem = mediaItem
            router()@.show({ view: videoPlayerView })
        else if mediaItem.media_type = NftOps.MediaType.IMAGE or mediaItem.media_type = NftOps.MediaType.GALLERY
            galleryView = CreateObject("roSGNode", "ImageGallery")
            galleryView.galleryItem = mediaItem
            router()@.show({ view: galleryView })
        else if mediaItem.media_file <> invalid
            qrView = createObject("roSGNode", "ExternalContentQrDialog")
            qrView.link = UrlUtil.assetLinkToUrl(mediaItem.media_file)
            createObject("roSGNode", "FullscreenDialog").showView = qrView
        else if mediaItem.offerid <> invalid
            ' Toast.show("Offer clicked. Not yet implemented.")
            redeemOfferView = CreateObject("roSGNode", "RedeemOfferView")
            redeemOfferView.offer_uid = {
                nftUid: mediaItem.nftUid
                offerId: mediaItem.offerId
            }
            router()@.show({ view: redeemOfferView })
        else
            Toast.show("Unknown media type")
        end if
    end sub
end namespace
