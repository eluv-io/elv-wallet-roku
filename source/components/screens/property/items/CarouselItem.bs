import "pkg:/components/screens/property/DisplaySettings.bs"
import "pkg:/components/screens/property/SectionConstants.bs"
import "pkg:/components/utils/str.bs"
import "pkg:/components/utils/Time.bs"
import "pkg:/components/utils/MediaItemUtil.bs"
import "pkg:/components/stores/permissions/PermissionUtil.bs"
import "pkg:/components/utils/NftOps.bs"
import "pkg:/components/utils/UrlUtil.bs"

sub init()
    m.image = m.top.findNode("image")
    m.title = m.top.findNode("title")

    m.overlay = m.top.findNode("overlay")
    m.overlayBg = m.top.findNode("overlayBg")
    m.metaHeaders = m.top.findNode("metaHeaders")
    m.metaTitle = m.top.findNode("metaTitle")
    m.metaSubtitle = m.top.findNode("metaSubtitle")

    m.liveTag = m.top.findNode("liveTag")
    m.liveTagText = m.top.findNode("liveTagText")

    m.purchaseOptionsLabel = m.top.findNode("purchaseOptionsLabel")

    m.video_icon = m.top.findNode("video_icon")
    m.playbackProgressBar = m.top.findNode("playbackProgressBar")
end sub

sub onContentChanged()
    content = m.top.content
    sectionItem = content.item

    media = sectionItem.media
    if media <> invalid
        if sectionItem.use_media_settings = true
            display = media
        else
            ' Keep media display settings, but override with anything that is well-defined in item.display
            display = DisplaySettings.applyOverrides(media, sectionItem.display)
        end if
        permissions = media.permissions._content
    else
        display = sectionItem.display
        permissions = sectionItem.permissions._content
    end if

    if content.bannerImageLink <> invalid
        setupAsBanner(content.bannerImageLink)
    else
        setupDisplaySettings(display, content.titleLabelSettings)
        updateLiveVideoTag(media)
    end if

    if PermissionUtil.isDisabled(permissions)
        m.top.opacity = 0.5
    else
        m.top.opacity = 1.0
    end if

    if PermissionUtil.showPurchaseOptions(permissions) or PermissionUtil.showAlternatePage(permissions)
        m.locked = true
        m.purchaseOptionsLabel.visible = true
        m.overlayBg.opacity = 1.0
    else
        m.locked = false
        m.purchaseOptionsLabel.visible = false
        m.overlayBg.opacity = 0.0
    end if

    progress = PlaybackStore.getPlaybackProgress(content?.item?.media?.id)
    m.playbackProgressBar.progress = progress
    m.playbackProgressBar.visible = progress > 0

    onFocusPercentChanged()
end sub

sub onFocusPercentChanged()
    focusPercent = m.top.focusPercent
    if m.locked = true
        ' always show dim for locked items
        m.overlayBg.opacity = 1.0
    else
        m.overlayBg.opacity = focusPercent
    end if
    m.overlay.opacity = focusPercent

    m.video_icon.opacity = isVideo() ? 1 - focusPercent : 0
end sub

function isVideo(content = m.top.content?.item?.media)
    return content?.media_type = NFtOps.MediaType.VIDEO
end function

sub setupDisplaySettings(display, titleLabelSettings)
    height = m.top.height
    width = m.top.width
    title = m.title
    title.update(titleLabelSettings)
    title.text = display?.title
    titleHeight = title.boundingRect().height
    title.translation = [0, height - titleHeight - SectionConstants.CAROUSEL_CARD_TITLE_BOTTOM_PADDING]
    title.width = width

    image = m.image
    image.width = width
    image.height = height - titleHeight - SectionConstants.CAROUSEL_CARD_TITLE_TOP_PADDING - SectionConstants.CAROUSEL_CARD_TITLE_BOTTOM_PADDING
    ' Round down to a multiple of 3 to prevent scaling issues
    image.height -= image.height mod 3
    m.overlay.width = image.width
    m.overlayBg.width = image.width
    m.overlay.height = image.height
    m.overlayBg.height = image.height
    updateOverlayTexts(display)
    ' Text padding depends on if this is a Wide or not
    textPadding = (image.width / image.height) > 1 ? 36 : 24
    updateOverlayTextPositions(image.width, textPadding)

    imageLink = DisplaySettings.getThumbnailAndRatio(display)?.thumbnail
    uri = UrlUtil.imageLinkToUrl(imageLink, image.height)
    if image.uri <> uri
        image.uri = uri
    end if

    ' Assume icon is 1x1 ratio
    iconSize = height * 0.3
    iconSize = iconSize > 66 ? 66 : iconSize ' Max size of 66
    m.video_icon.height = iconSize
    m.video_icon.width = iconSize
    m.video_icon.translation = [(image.width - iconsize) / 2, (image.height - iconSize) / 2]
end sub

sub setupAsBanner(bannerImageLink)
    image = m.image
    image.width = m.top.width
    image.height = m.top.height
    image.uri = UrlUtil.imageLinkToUrl(bannerImageLink, image.height)
end sub

sub updateOverlayTexts(display)
    headers = display.headers?.join?(", ") ?? ""
    m.metaHeaders.text = UCase(headers)
    m.metaTitle.text = display.title
    m.metaSubtitle.text = UCase(display.subtitle ?? "")

    ' Setting visibility to false, so later we can update positions based on what's visible
    for each label in [m.metaHeaders, m.metaTitle, m.metaSubtitle]
        label.visible = strNotEmpty(label.text)
    end for
end sub

sub updateOverlayTextPositions(cardWidth, textPadding)
    yOffset = m.overlay.height - textPadding
    ' Start placing labels from bottom to top
    labels = [m.playbackProgressBar, m.metaSubtitle, m.metaTitle, m.metaHeaders]
    ' In the design, there's different spacing between headers/title/subtitle, but this is good enough for roku.
    labelSpacing = 6
    for each label in labels
        if not label.visible then continue for
        label.width = cardWidth - (textPadding * 2)
        height = label.boundingRect().height
        label.height = height
        label.translation = [textPadding, yOffset - height]
        yOffset -= height + labelSpacing
    end for

    m.purchaseOptionsLabel.translation = [textPadding, textPadding]
    m.purchaseOptionsLabel.width = cardWidth - (textPadding * 2)
end sub

sub updateLiveVideoTag(media)
    bg = m.liveTag
    if media?.live_video <> true
        bg.opacity = 0.0
        return
    end if

    bg.opacity = 1.0
    label = m.liveTagText

    hPadding = 0
    vPadding = 0
    width = 0
    height = 0
    label.width = 0
    label.height = 0
    if MediaItemUtils.isEndedLive(media)
        ' Live video ended. design TBD (maybe it won't even show in the first place)
        bg.opacity = 0.0
    else if MediaItemUtils.isStartedLive(media)
        ' Live now. started but not ended
        bg.color = "#ff0000"
        label.update({
            text: "LIVE"
            numLines: 1
            fontStyle: "20_bold"
            color: "#ffffff"
        })
        hPadding = 9
        vPadding = 6

        rect = label.boundingRect()
        width = rect.width
        height = rect.height
    else
        ' Not started - Upcoming
        bg.color = "#272727"
        timestamp = getStartTimeString(media)
        label.update({
            text: timestamp
            numLines: 2
            fontStyle: "15_medium"
            color: "#B3B3B3"
        })
        ' Assume [timestamp] is longer than UPCOMING and measure width.
        ' For some reason, roku doesn't measure width correctly when string includes a line break
        hPadding = 12
        vPadding = 3

        ' Measure width first, while only the longest line is set as text
        width = label.boundingRect().width
        ' update label to full 2 lines string, so we can correctly measure height
        label.text = "UPCOMING" + chr(10) + timestamp
        height = label.boundingRect().height
    end if

    bg.width = width + (hPadding * 2)
    bg.height = height + (vPadding * 2)
    label.translation = [hPadding, vPadding]
    label.width = width
    label.height = height

    ' Place tag in lower right corner
    bg.translation = [
        m.image.width - bg.width - 30,
        m.image.height - bg.height - 30
    ]
end sub

function getStartTimeString(media)
    timestamp = time.fromISO8601String(media.start_time)
    if timestamp = invalid then return invalid

    date = timestamp.asDateStringLoc("M/d")
    timeOfDay = timestamp.asTimeStringLoc("short")

    return `${date} at ${timeOfDay}`
end function
