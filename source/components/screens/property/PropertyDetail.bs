import "pkg:/components/utils/UrlUtil.bs"
import "pkg:/components/utils/Toast.bs"
import "pkg:/components/utils/AspectRatio.bs"
import "pkg:/components/screens/property/DisplaySettings.bs"
import "pkg:/components/utils/Logger.bs"
import "pkg:/components/screens/property/SectionConstants.bs"
import "pkg:/components/utils/NftOps.bs"
import "pkg:/components/utils/MediaItemUtil.bs"
import "pkg:/components/stores/permissions/PermissionUtil.bs"
import "pkg:/components/screens/property/CarouselHelpers.bs"
import "pkg:/components/stores/stores.bs"

const SUPPORTED_ITEM_TYPES = { "media": 1,
    "external_link": 1, "property_link": 1, "subproperty_link": 1, "page_link": 1,
    "visual_only": 1,
    "item_purchase": 1
}

sub init()
    m.bgImage = m.top.findNode("bgImage")
    m.rowList = m.top.findNode("rowList")
    listLeftPadding = m.rowList.translation[0]
    m.rowList.rowWidth = 1920 - listLeftPadding
    m.rowList.itemClippingRect = { x: -listLeftPadding, y: 0, width: 1920, height: 1080 }
    m.rowList.clippingRect = [-listLeftPadding, 0, 1920, 1080]
    observe(m.rowList, "rowItemSelected", onSectionItemSelected)

    ' Dummy label that isn't attached to the screen. We use that to measure text sizes.
    m.dummyLabel = createObject("roSGNode", "TvLabel")

    m.btnSearch = m.top.findNode("btnSearch")
    observe(m.btnSearch, "buttonSelected", sub()
        view = createObject("roSGNode", "PropertySearch")
        view.property = m.top.property
        router()@.show({ view: view })
    end sub)

    ' Only show Search button when top row is focused.
    observe(m.rowList, "currFocusRow", sub()
        scrollPosition = m.rowList.currFocusRow
        if scrollPosition < 1
            ' Scrolling is between 0 and 1, update Search button opacity
            m.btnSearch.opacity = 1 - scrollPosition
        end if
    end sub)
end sub

sub onPageLinkChanged()
    link = m.top.linkData
    ' Load property object and save in m.top.property
    promises.chain(stores.propertyStore()@.getPropertyById(link.propertyId)).then(sub (property)
        m.top.property = property
    end sub)
end sub

sub onPropertyChanged()
    property = m.top.property

    pageId = m.top.linkData?.pageId
    if pageId <> invalid
        ' Observing a specific page will skip the property permissions check.
        ' As long as properties don't link to specific pages in other properties,
        ' this should be fine.
        pagePromise = stores.propertyStore()@.getPageById(property, pageId)
    else
        ' The default case. Not passing mainPage here to make sure we check the
        ' Property permissions before we check the page permissions,
        pagePromise = promises.resolve(invalid)
    end if
    promises.chain(pagePromise, property).then(function(page, property)
        return getFirstAuthorizedPage(property, page, {})
    end function).then(sub (page, property)
        m.page = page
        Logger.log(`Fetching sections for page ${page.id}`)
        stores.propertyStore()@.fetchSections(property, page)
        observe(stores.propertyStore(), "sections", onSectionsChanged)
        onSectionsChanged()
    end sub)

end sub

' Returns a Promise with the page to display
function getFirstAuthorizedPage(property, page, visitedPageIds)
    ' redirect function fetches the next page object and recursively checks permissions
    redirect = function(redirectPageId, property, visitedPageIds)
        context = { property: property, visitedPageIds: visitedPageIds }
        return promises.chain(stores.propertyStore()@.getPageById(property, redirectPageId), context).then(function(page, context)
            return getFirstAuthorizedPage(context.property, page, context.visitedPageIds)
        end function).toPromise()
    end function

    if page = invalid
        ' No specific page provided, check Property permissions
        if PermissionUtil.showAlternatePage(property.permissions._property)
            Logger.log(`Property not authorized, redirecting to alternate page`)
            return redirect(property.permissions._property.alternate_page_id, property, visitedPageIds)
        else if PermissionUtil.showPurchaseOptions(property.permissions._property)
            ' Show purchase options page for property...
            Toast.show("to be impl: property purchase options")
            return promises.reject("to be impl: property purchase options")
        else
            ' We're authorized to view the property, default to main_page and check its permissions
            return getFirstAuthorizedPage(property, property.main_page, visitedPageIds)
        end if
    else
        ' This is a request for a specific page, ignore Property permissions, or we'll get stuck in a never-ending loop.
        pagePermissions = page.permissions._page
        shouldRedirect = PermissionUtil.showAlternatePage(pagePermissions)
        redirectPageId = shouldRedirect ? pagePermissions.alternate_page_id : invalid
        if pagePermissions.authorized = true
            Logger.log(`Authorized to view page '${page.id}'`)
            return promises.resolve(page)
        else if redirectPageId = page.id or visitedPageIds.doesExist(redirectPageId)
            ' We already checked this page id, or this is a self-reference.
            ' Either way we've completed a cycle without finding a page we are allowed to view.
            Logger.log(`FIXME: Circular page permission problem!`)
            ' throw? router().pop?
        else
            ' Page is unauthorized, but redirect is valid
            Logger.log(`Reached unauthorized page ${page.id}, redirecting to ${redirectPageId}}`)
            visitedPageIds[page.id] = 1
            return redirect(redirectPageId, property, visitedPageIds)
        end if
    end if
end function

sub onSectionsChanged()
    Logger.log(source_function_name)
    property = m.top.property
    sections = stores.propertyStore().sections[`${property?.id}_${m.page.id}`]
    if sections = invalid then return
    content = createObject("roSGNode", "ContentNode")
    heroSectionBgImage = invalid

    ' Rows that contain no focusable elements will add their content to [decorations],
    ' then the first following that is focusable will add pending decorations to their title row
    decorations = []
    for each section in sections
        nodes = sectionToNodes(section, decorations)
        content.appendChildren(nodes)

        ' Find the first hero section and use its background as the page background.
        if heroSectionBgImage = invalid and section.type = "hero"
            for each heroItem in section.hero_items
                if heroItem.display?.background_image <> invalid
                    heroSectionBgImage = heroItem.display?.background_image
                    exit for
                end if
            end for
        end if
    end for

    if content.getChildCount() = 0
        ' Make focus transparent
        m.rowList.focusBitmapBlendColor = "#00000000"
    else
        ' Make sure focus is not transparent from a previous SectionChange
        m.rowList.focusBitmapBlendColor = "#FFFFFFFF"
    end if

    if decorations.count() > 0
        Logger.log(`Unfocusable rows at end of List. Adding an empty row`)
        row = createNewSection()
        dumpDecorations(row, decorations)
        content.appendChild(row)
    end if

    m.bgImage.uri = UrlUtil.imageLinkToUrl(heroSectionBgImage ?? m.page.layout.background_image, m.bgImage.height)

    CarouselHelpers.updateZoomRowListHeights(m.rowList, content, m.dummyLabel)

    m.rowList.content = content
    m.btnSearch.visible = true
end sub

' Each "section" from the backend might end up being 0-n rows on the UI
function sectionToNodes(section, decorations)
    if shouldHideSection(section) then return []

    newRows = invalid
    if section.type = "automatic" or section.type = "manual" or section.type = "search"
        permissionContext = {
            propertyId: m.top.property.id,
            pageId: m.page.id,
            sectionId: section.id
        }
        newRows = CarouselHelpers.createCarouselSection(section, permissionContext, m.dummyLabel)
    else if section.type = "hero"
        newRows = createHeroSections(section, decorations)
    else if section.type = "container"
        newRows = createContainerSection(section, decorations)
    end if

    newRows = newRows ?? []
    if newRows.count() > 0
        ' If we have any new rows, dump decorations into the first one
        dumpDecorations(newRows[0], decorations)
    end if

    return newRows
end function

function shouldHideSection(section)
    if PermissionUtil.isHidden(section.permissions?._content) then return true

    if section.display.hide_on_tv = true then return true

    if isContainerWithNoVisibleSubsections(section) then return true

    if section.type = "hero"
        children = section.hero_items ?? []
    else if section.type = "container"
        ' This is handled separately in [isContainerWithNoVisibleSubsections]
        children = []
    else
        children = section.content ?? []
    end if

    if children.count() = 0 then return true
    ' If has no visible children, hide the section
    hasVisibleChildren = false
    for each child in children
        if not PermissionUtil.isHidden(child.permissions?._content)
            hasVisibleChildren = true
            exit for
        end if
    end for
    if not hasVisibleChildren then return true

    return false
end function

function isContainerWithNoVisibleSubsections(section)
    if section.type <> "container" then return false
    for each subsection in (section.sections_resolved ?? [])
        if not shouldHideSection(subsection) then return false
    end for
    return true
end function

function createContainerSection(section, decorations)
    if strNotEmpty(section.display.title)
        dummyLabel = m.dummyLabel
        decorations.push({
            "type": "TextItem",
            height: dummyLabel.boundingRect().height
            width: SectionConstants.TEXT_MAX_WIDTH
            content: {
                fontStyle: "42_regular"
                text: section.display.title
                width: SectionConstants.TEXT_MAX_WIDTH
                maxLines: 1
                wrap: false
            }
        })
    end if
    rows = []
    subsections = section.sections_resolved ?? []
    for each subsection in subsections
        rows.append(sectionToNodes(subsection, decorations))
    end for
    return rows
end function

function createHeroSections(section, decorations)
    dummyLabel = m.dummyLabel
    items = section.hero_items ?? []
    rows = []
    for each item in items
        if item.display?.logo <> invalid
            ' Create banner from Hero logo
            decorations.push({
                "type": "BannerItem",
                height: 180
                width: 1260
                content: { imageLink: item.display.logo }
            })
            decorations.push({
                "type": "Spacer"
                height: 81
            })
        end if

        if strNotEmpty(item.display?.title)
            labelSettings = {
                text: item.display.title,
                maxLines: 1
                wrap: false
                fontStyle: "header_48"
            }
            ' measure Title height
            dummyLabel.update(labelSettings)
            decorations.push({
                "type": "TextItem",
                height: dummyLabel.boundingRect().height
                width: SectionConstants.TEXT_MAX_WIDTH
                content: labelSettings
            })
            decorations.push({
                "type": "Spacer"
                height: 27
            })
        end if

        if strNotEmpty(item.display?.description)
            ' Figure out if Description needs to be focusable or not:
            ' If it fits without ellipsizing, then there's no need to focus on it
            labelSettings = {
                "type": "TextItem"
                fontStyle: "label_24"
                text: item.display.description
                width: SectionConstants.TEXT_MAX_WIDTH
                maxLines: 3
                wrap: true
            }
            dummyLabel.update(labelSettings)
            ' Calling boundingRect() triggers some measuring logic in the label
            ' and [isTextEllipsized] will have a correct value only after calling it, so do that first
            height = dummyLabel.boundingRect().height
            descriptionFocusable = dummyLabel.isTextEllipsized
            ' Reset for next use
            dummyLabel.width = 0

            ' If description is focusable, we can make it an actual row, and add the title/logo as decorations
            ' if it's not, then add all 3 elements to [decorations] and let them be added to the next row
            if descriptionFocusable
                row = createNewSection()
                textItem = row.createChild("AAContentNode")
                textItem.update({ aspectRatio: SectionConstants.TEXT_MAX_WIDTH / height }, true)
                textItem.aa = labelSettings
                row.update({ desiredHeight: height }, true)
                dumpDecorations(row, decorations)

                rows.push(row)
            else
                decorations.push({
                    "type": "TextItem",
                    height: height
                    width: SectionConstants.TEXT_MAX_WIDTH
                    content: labelSettings
                })
            end if
            ' Whether or not Description is focusable, add a spacer before the next line
            decorations.push({
                "type": "Spacer"
                height: 72
            })
        end if
    end for
    return rows
end function

function createNewSection(display = invalid)
    section = createObject("roSGNode", "AAContentNode")
    if display <> invalid
        section.update({ display: display }, true)
    end if
    return section
end function

sub onSectionItemSelected(event)
    index = m.rowList.rowItemSelected ' [rowIndex, itemIndex]
    item = m.rowList.content.getChild(index[0]).getChild(index[1])
    itemType = item.aa.type
    if itemType = "CarouselItem"
        CarouselHelpers.onSectionItemClicked(item.aa.item, m.top.property)
    else if itemType = "TextItem"
        Toast.show(`TODO: show dialog with text: ${left(item.aa.text, 10)}...`)
    else if itemType = "Spacer"
        ' No-Op
    else if itemType = "ViewAllButton"
        view = createObject("roSGNode", "MediaGrid")
        view.property = m.top.property
        view.page = m.page
        view.section = item.aa.section
        router()@.show({ view: view })
    else
        Toast.show(`to be impl: type=${itemType}`)
    end if
end sub

sub dumpDecorations(row, decorations)
    customDecorations = row.customDecorations ?? []
    customDecorations.append(decorations)
    row.update({ customDecorations: customDecorations }, true)
    decorations.clear()
end sub

function onKeyEvent(key as string, press as boolean) as boolean
    handled = false
    if press
        if key = "up"
            if m.rowList.IsInFocusChain()
                m.btnSearch.setFocus(true)
                handled = true
            end if
        else if key = "down"
            if m.btnSearch.IsInFocusChain()
                m.rowList.setFocus(true)
                handled = true
            end if
        end if
    end if
    return handled
end function

sub onResume()
    ' Refresh all content. This will make sure playback progress is up to date
    onPropertyChanged()
end sub
