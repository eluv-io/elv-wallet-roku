import "pkg:/components/utils/UrlUtil.bs"
import "pkg:/components/utils/Toast.bs"
import "pkg:/components/utils/AspectRatio.bs"
import "pkg:/components/screens/property/DisplaySettings.bs"
import "pkg:/components/utils/Logger.bs"
import "pkg:/components/screens/property/SectionConstants.bs"
import "pkg:/components/stores/stores.bs"

sub init()
    m.bgImage = m.top.findNode("bgImage")
    m.rowList = m.top.findNode("rowList")
    m.rowList.rowWidth = 1920 - m.rowList.translation[0]
    observe(m.rowList, "rowItemSelected", onSectionItemSelected)

    ' Dummy label that isn't attached to the screen. We use that to measure text sizes.
    m.dummyLabel = createObject("roSGNode", "TvLabel")
end sub

sub onPropertyChanged()
    property = m.top.property

    ' TODO: figure out page according to permissions
    m.page = property.main_page

    stores.propertyStore()@.fetchSections(property, m.page)
    stores.propertyStore().ObserveFieldScoped("sections", "onSectionsChanged")
    onSectionsChanged()
end sub

sub onSectionsChanged()
    Logger.log(source_function_name)
    property = m.top.property
    sections = stores.propertyStore().sections[`${property?.id}_${m.page.id}`]
    if sections = invalid then return
    content = createObject("roSGNode", "ContentNode")
    heroSectionBgImage = invalid
    for each section in sections
        sectionToNodes(section, content)

        ' Find the first hero section and use its background as the page background.
        if heroSectionBgImage = invalid and section.type = "hero"
            for each heroItem in section.hero_items
                if heroItem.display?.background_image <> invalid
                    heroSectionBgImage = heroItem.display?.background_image
                    exit for
                end if
            end for
        end if
    end for

    m.bgImage.uri = UrlUtil.imageLinkToUrl(heroSectionBgImage ?? m.page.layout.background_image, m.bgImage.height)

    updateListHeights(content)

    m.rowList.content = content
end sub

sub updateListHeights(content)
    listTopPadding = SectionConstants.PROPERTY_LIST_TOP_PADDING

    rowCount = content.getChildCount()
    rowHeights = createObject("roArray", rowCount, false)
    rowZoomHeights = createObject("roArray", rowCount, false)

    rowItemHeights = createObject("roArray", rowCount, false)
    rowItemZoomHeights = createObject("roArray", rowCount, false)

    rowItemYOffsets = createObject("roArray", rowCount, false)
    rowItemZoomYOffsets = createObject("roArray", rowCount, false)

    dummyLabel = m.dummyLabel
    dummyLabel.update({
        text: "A"
        fontStle: "body_32"
        maxLines: 1
    })
    titleFontHeight = dummyLabel.boundingRect().height
    rowTitleOffsets = createObject("roArray", rowCount, false)

    for i = 0 to rowCount - 1
        row = content.getChild(i)
        itemHeight = row.desiredHeight ?? 200
        rowHeight = itemHeight
        if strNotEmpty(row.title)
            rowHeight += titleFontHeight + 30 ' a lil' extra padding below title
        end if
        rowHeights[i] = rowHeight
        rowZoomHeights[i] = rowHeight + listTopPadding
        rowItemHeights[i] = itemHeight
        rowItemZoomHeights[i] = itemHeight

        rowItemYOffsets[i] = rowHeight - itemHeight
        rowItemZoomYOffsets[i] = (rowHeight - itemHeight) + listTopPadding
    end for

    rowList = m.rowList
    rowList.rowHeight = rowHeights
    rowList.rowZoomHeight = rowZoomHeights
    rowList.rowItemHeight = rowItemHeights
    rowList.rowItemZoomHeight = rowItemZoomHeights
    rowList.rowItemYOffset = rowItemYOffsets
    rowList.rowItemZoomYOffset = rowItemZoomYOffsets
    rowList.rowTitleOffset = rowTitleOffsets
end sub

' Each "section" from the backend might end up being 0-n rows on the UI
sub sectionToNodes(section, rootNode)
    if shouldHideSection(section) then return
    if section.type = "automatic" or section.type = "manual" or section.type = "search"
        createCarouselSection(section, rootNode)
    else if section.type = "hero"
        createHeroSections(section, rootNode)
    end if
end sub

function shouldHideSection(section)
    if section.permissions?._content?.authorized <> true then return true
    if section.display.hide_on_tv = true then return true
    ' TODO:
    ' if type=contrainer and all subsections hidden -> return true
    ' if all items are hidden -> return true
    return false
end function


sub createCarouselSection(section, rootNode)
    row = createNewSection(rootNode, section.display)
    row.title = section.display?.title
    for each item in section.content
        child = row.createChild("AAContentNode")
        child.aa = { "type": "carouselItem", item: item }
        child.update({ aspectRatio: DisplaySettings.getThumbnailAndRatio(item.media)?.aspectRatio }, true)
    end for
end sub

sub createHeroSections(section, rootNode)
    items = section.hero_items ?? []
    for each item in items
        if item.display?.logo <> invalid
            ' Create banner from Hero logo
            row = createNewSection(rootNode)
            row.createChild("AAContentNode").aa = { "type": "banner", imageLink: item.display.logo }
        end if
        createTextSection(item.display?.title, 1, "carousel_48", rootNode)
        createTextSection(item.display?.description, 3, "label_24", rootNode)
    end for
end sub

sub createTextSection(text, maxLines, fontStyle, rootNode)
    if text = invalid then return
    row = createNewSection(rootNode)
    labelSettings = {
        "type": "text"
        text: text,
        maxLines: maxLines,
        fontStyle: fontStyle,
        wrap: true
    }

    dummyLabel = m.dummyLabel
    ' Update the dummy label with the settings so we can measure how wide it would grow naturally
    dummyLabel.setFields(labelSettings)

    width = dummyLabel.boundingRect().width
    ' same width set in TextItem
    labelMaxWidth = 990
    if width > labelMaxWidth then width = labelMaxWidth

    ' Bound the width to labelMaxWidth to check how many lines the label would wrap to.
    dummyLabel.width = labelMaxWidth
    height = dummyLabel.boundingRect().height
    ' Reset for next use
    dummyLabel.width = 0

    textItem = row.createChild("AAContentNode")
    textItem.update({ aspectRatio: width / height }, true)
    textItem.aa = labelSettings

    row.update({ desiredHeight: height }, true)
end sub

function createNewSection(rootNode, display = invalid)
    section = rootNode.createChild("AAContentNode")
    if display <> invalid
        section.update({ display: display }, true)
    end if
    return section
end function

sub onSectionItemSelected(event)
    index = m.rowList.rowItemSelected
    item = m.rowList.content.getChild(index[0]).getChild(index[1])
    itemType = item.aa.type
    if itemType = "carouselItem"
        Toast.show(`TODO: media card click`)
    else if itemType = "text"
        Toast.show(`TODO: show dialog with text: ${left(item.aa.text, 10)}...`)
    else
        Toast.show(`to be impl: type=${itemType}`)
    end if
end sub