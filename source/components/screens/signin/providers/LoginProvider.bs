
interface LoginProvider
    ' Return a Promise that fetches the activation data
    sub getActivationData() as object

    ' Check if token has been activated and handle the result.
    ' The returned Promise should return the fabricToken when successful, or "pending" otherwise.
    sub checkToken(activationData) as object

    sub getCode(activationData) as string
    sub getQrUrl(activationData) as string

    ' Polling frequency in seconds
    sub getPollingInterval(activationData) as integer
    ' Returns how many seconds from now until the code expires
    sub getExpiresIn(activationData) as integer
end interface

class Auth0Provider
    sub getActivationData() as object
        return stores.tokenStore()@.GetActivationData(false)
    end sub

    sub checkToken(activationData) as object
        return promises.chain(stores.tokenStore()@.checkDeviceAuthorization(activationData.device_code)).then(
        function(response)
            if response.code = 200
                ' Auth0 gave us an IdToken, move own to obtain client-signed-access-token
                return stores.tokenStore()@.fetchFabricToken()
            end if
            return "pending"
        end function
        ).toPromise()
    end sub

    sub getCode(activationData) as string
        return activationData.user_code
    end sub

    sub getQrUrl(activationData) as string
        return activationData.verification_uri_complete
    end sub

    sub getPollingInterval(activationData) as integer
        return activationData.interval
    end sub

    sub getExpiresIn(activationData) as integer
        return activationData.expires_in
    end sub
end class

class OryProvider
    sub new(propertyId)
        m.propertyId = propertyId
    end sub

    sub getActivationData() as object
        return stores.tokenStore()@.GetActivationData(true)
    end sub

    sub checkToken(activationData) as object
        return promises.chain(stores.tokenStore()@.checkMetamaskAuthorization(activationData.id, activationData.passcode)).then(
        function(response)
            if response.code = 200
                return stores.tokenStore().fabricToken
            else
                return "pending"
            end if
        end function
        ).toPromise()
    end sub

    sub getCode(activationData) as string
        return activationData.id
    end sub

    sub getQrUrl(activationData) as string
        url = activationData.url
        url = UrlUtil.appendQuery(url, "ory", "")
        url = UrlUtil.appendQuery(url, "pid", m.propertyId)
        return url
    end sub

    sub getPollingInterval(activationData) as integer
        return 5
    end sub

    sub getExpiresIn(activationData) as integer
        return activationData.expiration - time.now()
    end sub
end class

class MetaMaskProvider extends OryProvider
    override sub getQrUrl(activationData) as string
        return activationData.metamask_url
    end sub
end class