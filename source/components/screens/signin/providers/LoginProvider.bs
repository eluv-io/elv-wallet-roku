
' The interface is here because we used to support multiple login providers, but now we've simplified it to only Ory.
interface LoginProvider
    ' Return a Promise that fetches the activation data
    sub getActivationData() as object

    ' Check if token has been activated and handle the result.
    ' The returned Promise should return the fabricToken when successful, or "pending" otherwise.
    sub checkToken(activationData) as object

    sub getCode(activationData) as string
    sub getQrUrl(activationData) as string

    ' Polling frequency in seconds
    sub getPollingInterval(activationData) as integer
    ' Returns how many seconds from now until the code expires
    sub getExpiresIn(activationData) as integer
end interface

class OryProvider
    sub new(property)
        m.propertyId = property.id
    end sub

    sub getActivationData() as object
        return stores.tokenStore()@.GetActivationData()
    end sub

    sub checkToken(activationData) as object
        return promises.chain(stores.tokenStore()@.checkAuthorization(activationData.id, activationData.passcode)).then(
        function(response)
            if response.code = 200
                return stores.tokenStore().fabricToken
            else
                return "pending"
            end if
        end function
        ).toPromise()
    end sub

    sub getCode(activationData) as string
        return activationData.id
    end sub

    sub getQrUrl(activationData) as string
        url = activationData.url
        url = UrlUtil.appendQuery(url, "ory", "")
        url = UrlUtil.appendQuery(url, "pid", m.propertyId)
        return url
    end sub

    sub getPollingInterval(activationData) as integer
        return 5
    end sub

    sub getExpiresIn(activationData) as integer
        return activationData.expiration - time.now()
    end sub
end class
