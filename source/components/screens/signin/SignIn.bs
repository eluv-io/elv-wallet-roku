import "pkg:/components/utils/promise.bs"
import "pkg:/components/utils/RouterUtils.bs"
import "pkg:/components/http/http.bs"
import "pkg:/components/utils/UrlUtil.bs"
import "pkg:/components/utils/Toast.bs"
import "pkg:/components/screens/signin/providers/LoginProvider.bs"
import "pkg:/components/screens/signin/UrlShortener.bs"
import "pkg:/components/stores/stores.bs"

sub init()
    m.bgImage = m.top.findNode("bgImage")

    m.qrCode = m.top.findNode("qr_code")
    m.qrImage = m.top.findNode("qr_image")

    m.expirationTimer = m.top.findNode("code_expiration_timer")
    m.expirationTimer.ObserveField("fire", "getNewCode")

    m.statusTimer = m.top.findNode("status_poll_timer")
    m.statusTimer.ObserveField("fire", "checkStatus")

    m.newCodeButton = m.top.findNode("btn_new_code")
    m.newCodeButton.ObserveField("buttonSelected", "getNewCode")

    m.metamaskButton = m.top.findNode("btn_metamask")
    m.metamaskButton.observeFieldScoped("buttonSelected", "onMetamaskClicked")
    m.backButton = m.top.findNode("btn_back")
    m.backButton.observeFieldScoped("buttonSelected", "onBackClicked")

    m.spinner = m.top.findNode("spinner")
    m.spinner.poster.observeField("loadStatus", "centerSpinner")
    centerSpinner()
end sub

sub onPropertyChanged()
    property = m.top.property
    login = property?.login
    loginStyle = login?.styling
    uri = loginStyle?.background_image_tv ?? loginStyle?.background_image_desktop
    m.bgImage.uri = UrlUtil.imageLinkToUrl(uri, m.bgImage.height)

    providerName = login?.settings?.provider ?? "UNKNOWN"
    if providerName = "ory"
        m.metamaskButton.visible = false
        provider = new OryProvider(property.id)
    else if providerName = "auth0"
        provider = new Auth0Provider()
    else if providerName = "metamask"
        provider = new MetaMaskProvider()
    end if

    if provider = invalid
        ' TBD, explode or something
    end if

    m.loginProvider = provider
    getNewCode()
end sub

sub getNewCode()
    m.expirationTimer.control = "stop"
    m.statusTimer.control = "stop"

    promises.chain(m.loginProvider.getActivationData()).then(
    function(response)
        activationData = response.json
        provider = m.loginProvider
        m.activationData = activationData
        m.qrCode.text = provider.getCode(activationData)

        m.statusTimer.duration = provider.getPollingInterval(activationData)
        m.statusTimer.control = "start"

        m.expirationTimer.duration = provider.getExpiresIn(activationData)
        m.expirationTimer.control = "start"

        qrUrl = provider.getQrUrl(activationData)
        return shortenUrl(qrUrl)
    end function).then(
    sub(qrUrl)
        size = m.qrImage.boundingRect().width
        m.qrImage.uri = UrlUtil.qrUrlForData(qrUrl, size)
    end sub
    )
end sub

sub onBackClicked()
    m.top.close = true
end sub

sub onMetamaskClicked()
    router()@.show({ view: CreateObject("roSGNode", "MetamaskLogin") })
end sub

sub checkStatus()
    promises.chain(m.loginProvider.checkToken(m.activationData)).then(
    sub (result)
        if result <> "pending"
            ' Assume success. this is VERY optimistic.
            ' We don't need to actually navigate to Dashboard, removing the app stack will
            ' cause [MainRouter] to re-run started logic, realize we're logged in and navigate to Dashboard.
            ' This is required to make sure none of the login flow screens are in the backstack after login.
            m.expirationTimer.control = "stop"
            m.statusTimer.control = "stop"
            router().removeStack = "app"
        end if
    end sub)
end sub

sub centerSpinner()
    if(m.spinner.poster.loadStatus = "ready")
        centerx = (m.qrImage.width - m.spinner.poster.bitmapWidth) / 2
        centery = (m.qrImage.height - m.spinner.poster.bitmapHeight) / 2
        m.spinner.translation = [centerx, centery]
    end if
end sub

function OnKeyEvent(key as string, press as boolean) as boolean
    if press
    end if
    if key = "down" and (m.newCodeButton.hasFocus() or m.backButton.hasFocus())
        return m.metamaskButton.setFocus(true)
    else if key = "up" and m.metamaskButton.hasFocus()
        return m.newCodeButton.setFocus(true)
    else if key = "right" and m.newCodeButton.hasFocus()
        return m.backButton.setFocus(true)
    else if key = "left" and m.backButton.hasFocus()
        return m.newCodeButton.setFocus(true)
    end if
    return false
end function
