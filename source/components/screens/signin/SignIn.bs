import "pkg:/components/utils/promise.bs"
import "pkg:/components/utils/RouterUtils.bs"
import "pkg:/components/http/http.bs"
import "pkg:/components/stores/stores.bs"

sub init()
    m.qrCode = m.top.findNode("qr_code")
    m.qrImage = m.top.findNode("qr_image")

    m.expirationTimer = m.top.findNode("code_expiration_timer")
    m.expirationTimer.ObserveField("fire", "getNewCode")

    m.statusTimer = m.top.findNode("status_poll_timer")
    m.statusTimer.ObserveField("fire", "checkStatus")

    m.top.findNode("btn_new_code").ObserveField("buttonSelected", "getNewCode")

    m.spinner = m.top.findNode("spinner")
    m.spinner.poster.observeField("loadStatus", "centerSpinner")

    getNewCode()
end sub

sub getNewCode()
    promises.chain(stores.tokenStore()@.GetActivationData()).then(
    sub(response)
        url = response.json.verification_uri_complete
        data = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&margin=10&data=${url}`
        m.qrCode.text = response.json.user_code
        m.qrImage.uri = data

        m.deviceCode = response.json.device_code
        m.statusTimer.duration = response.json.interval
        m.statusTimer.control = "start"

        m.expirationTimer.duration = response.json.expires_in
        m.expirationTimer.control = "start"
    end sub
    )
end sub

sub checkStatus()
    promises.chain(stores.tokenStore()@.checkDeviceAuthorization(m.deviceCode)).then(
    function(response)
        if response.code = 200
            m.expirationTimer.control = "stop"
            m.statusTimer.control = "stop"
            ' Auth0 gave us an IdToken, move own to obtain client-signed-access-token
            return stores.tokenStore()@.fetchFabricToken()
        end if
        return "pending"
    end function
    ).then(sub (result)
        if result <> "pending"
            ' Assume success. this is VERY optimistic
            router()@.show({ view: CreateObject("roSGNode", "Dashboard") })
        end if
    end sub)
end sub

sub centerSpinner()
    if(m.spinner.poster.loadStatus = "ready")
        centerx = (m.qrImage.width - m.spinner.poster.bitmapWidth) / 2
        centery = (m.qrImage.height - m.spinner.poster.bitmapHeight) / 2
        m.spinner.translation = [centerx, centery]
    end if
end sub
