import "pkg:/components/stores/stores.bs"
import "pkg:/components/utils/UrlUtil.bs"
import "pkg:/components/utils/Toast.bs"
import "pkg:/components/http/http.bs"

sub init()
    m.videoPlayer = m.top.findNode("VideoPlayer")
    m.videoPlayer.content = createobject("roSGNode", "ContentNode")

    stores.tokenStore().observeFieldScoped("fabricToken", "onFabricTokenChanged")
    onFabricTokenChanged()
end sub

sub onFabricTokenChanged()
    token = stores.tokenStore().fabricToken

    ' Header for DRM license requests
    m.videoPlayer.addHeader("Authorization", `Bearer ${token}`)

    ' Header for video segment requests
    m.videoPlayer.content.httpHeaders = `Authorization:Bearer ${token}`

    print "Set video player token to", token
end sub

sub onPropertyMediaChanged()
    propertyId = m.top.propertyMedia.propertyId
    mediaId = m.top.propertyMedia.mediaId

    if propertyId = invalid or mediaId = invalid
        Toast.show("Invalid media")
        return
    end if

    isLive = m.top.propertyMedia.isLive = true
    if isLive
        ' Start live video at live-edge.
        playStartPosition = -0.1
    else
        ' Restore playback position if not more than 90% done, or start at 0.
        if (PlaybackStore.getPlaybackProgress(m.top.propertyMedia.mediaId) ?? 0) < 0.9
            playStartPosition = PlaybackStore.getPlaybackPosition(m.top.propertyMedia.mediaId)
        else
            playStartPosition = 0
        end if
    end if

    context = {
        title: m.top.propertyMedia.title,
        isLive: isLive,
        playStartPosition: playStartPosition
    }

    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    url = `${baseUrl}/mw/properties/${propertyId}/media_items/${mediaId}/offerings/any/playout_options`
    promises.chain(http.get(url), context).then(sub(result, context)
        playoutConfig = result.json["hls-clear"] ?? result.json["dash-clear"] ?? result.json["dash-widevine"]
        fabricUrl = stores.fabricConfigStore()@.getFabricBaseUrl()
        m.videoPlayer.content.setFields({
            streamFormat: playoutConfig.properties.protocol,
            url: `${fabricUrl}/${playoutConfig.uri}`,
            drmParams: buildDrm(playoutConfig.properties),
            title: context.title,
            playStart: context.playStartPosition,
            live: context.isLive,
        })
        m.videoPlayer.control = "play"
    end sub)
end sub

' LEGACY. Not called for Properties
sub onVideoItemChanged()
    media = m.top.videoItem.media_link
    m.videoPlayer.content.title = media.display_title ?? media.title

    ' Don't use "main.net955305" as baseUrl, but the specific node pointed by the config
    baseUrl = stores.fabricConfigStore()@.getFabricBaseUrl()
    optionsJsonUrl = UrlUtil.assetLinkToUrl(media.sources.default, `${baseUrl}/`)
    context = { requestUrl: optionsJsonUrl }
    promises.chain(http.get(optionsJsonUrl), context).then(sub (result, context)
        ' Sorted by priority
        playoutConfig = result.json["dash-clear"] ?? result.json["hls-clear"] ?? result.json["dash-widevine"]
        m.videoPlayer.content.setFields({
            streamFormat: playoutConfig.properties.protocol,
            url: context.requestUrl.replace("options.json", playoutConfig.uri),
            drmParams: buildDrm(playoutConfig.properties)
        })
        m.videoPlayer.control = "play"

    end sub)
end sub

function buildDrm(properties) as dynamic
    if properties?.drm = invalid
        return invalid
    end if
    return {
        KeySystem: properties.drm,
        licenseServerURL: properties.license_servers[0]
    }
end function

function onKeyEvent(key as string, press as boolean) as boolean
    if press and key = "back" and m.top.propertyMedia.isLive <> true
        ' Store current playback position, but don't interfere with normal back behavior.
        PlaybackStore.setPlaybackPosition(m.top.propertyMedia.mediaId, m.videoPlayer.position, m.videoPlayer.duration)
    end if
    return false
end function
