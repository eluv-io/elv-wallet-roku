import "pkg:/components/utils/RouterUtils.bs"
import "pkg:/components/stores/stores.bs"
sub init()
    grid = m.top.findNode("grid")
    m.grid = grid
    grid.observeField("itemSelected", "onGridItemSelected")
    showPlaceholderGrid()
    stores.contentStore().observeField("nfts", "onNftsChanged")
    onNftsChanged()
end sub

sub onGridItemSelected()
    grid = m.grid
    item = grid.content.getChild(grid.itemSelected)
    if item.title = "placeholder"
        print "NFT grid still loading - ignoring click."
        return
    end if
    print "selected item index:", grid.itemSelected
    nftDetail = CreateObject("roSGNode", "NftDetail")
    nftDetail.nft = item
    router()@.show({ view: nftDetail })
end sub

sub showPlaceholderGrid()
    content = createObject("roSGNode", "ContentNode")
    for i = 0 to 8
        content.createChild("ContentNode").title = "placeholder"
    end for
    m.grid.content = content
end sub

sub onNftsChanged()
    nfts = stores.contentStore().nfts
    if nfts = invalid
        return
    end if

    content = createObject("roSGNode", "ContentNode")
    for each nft in nfts
        nftToContentNode(nft, content)
    end for

    m.grid.content = content
end sub

function nftToContentNode(nft, rootNode)
    node = rootNode.createChild("MediaNode")
    template = nft.nft_template
    node.sourceNft = nft
    node.key = template.id
    node.contractAddress = template.address
    node.imageUrl = nft.meta.image
    node.title = nft._name
    node.subtitle = template.edition_name
    node.description = template.description
    node.tokenId = nft.token_id_str
    'node.tenant = fetched later from /nft/info/{ictr}/{tokenId}
end function
