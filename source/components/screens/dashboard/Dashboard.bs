import "pkg:/components/screens/dashboard/Tabs.bs"
import "pkg:/components/utils/Toast.bs"
import "pkg:/components/stores/stores.bs"

sub init()
    m.root = m.top.findNode("root")
    m.tabContainer = m.top.findNode("tab_container")
    sideNav = m.top.findNode("sideNav")
    m.sideNav = sideNav

    ' Store created tab nodes so they don't need to be re-created when visiting a tab we've been to before
    m.tabCache = {}

    sideNav.ObserveField("selectedTab", "onTabSelected")
    onTabSelected()
    sideNav.ObserveField("visible", "onSideNavVisChange")
    onSideNavVisChange()
end sub

sub onTabSelected()
    nextTabName = m.sideNav.selectedTab
    if m.lastSelectedTab <> nextTabName
        m.lastSelectedTab = nextTabName
        m.tabContainer.removeChildIndex(0)

        cachedTab = m.tabCache[nextTabName]
        if cachedTab = invalid
            m.tabCache[nextTabName] = m.tabContainer.createChild(nextTabName)
        else
            m.tabContainer.appendChild(cachedTab)
        end if
    end if
    m.tabContainer.getChild(0).setFocus(true)
end sub

sub onSideNavVisChange()
    ' Change left indent according to sidenav visibility
    if m.sideNav.visible
        m.tabContainer.translation = [m.sideNav.collapsedSize, 0]
    else
        m.tabContainer.translation = [30, 0]
        if m.sideNav.IsInFocusChain() then m.tabContainer.getChild(0).setFocus(true)
    end if
end sub

function onKeyEvent(key as string, press as boolean) as boolean
    handled = false
    if press and m.sideNav.visible
        if key = "right" and m.sideNav.IsInFocusChain()
            m.tabContainer.getChild(0).setFocus(true)
            handled = true
        else if (key = "left" or key = "back") and m.tabContainer.IsInFocusChain()
            m.sideNav.setFocus(true)
            handled = true
        end if
    end if
    return handled
end function