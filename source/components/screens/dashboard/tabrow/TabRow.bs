import "pkg:/components/stores/stores.bs"
import "pkg:/components/screens/dashboard/tabrow/Tabs.bs"

sub init()
    m.top.setFocus(true)

    ' Because node.visible = false behaves like INVISIBLE and not GONE, we want to actually remove all children
    ' and only add them when they should be visible
    root = m.top.findNode("root")
    m.root = root
    m.top.removeChild(root)

    grid = root.findNode("grid")
    m.grid = grid

    m.bg = root.findNode("tabs_bg")

    stores.tokenStore().observeFieldScoped("fabricToken", "onFabricTokenChanged")
    onFabricTokenChanged()

    grid.observeField("itemFocused", "onGridFocusChanged")
end sub

const NoAuthTabs = [Tabs.Discover]
const AuthTabs = [Tabs.Discover, Tabs.MyItems, Tabs.Profile]

sub onFabricTokenChanged()
    loggedIn = stores.tokenStore().fabricToken <> ""
    ' Only update tabs if login state actually changed
    if loggedIn <> m.lastLoginState
        m.lastLoginState = loggedIn

        if loggedIn
            m.top.appendChild(m.root)
            tabs = AuthTabs
        else
            m.top.removeChild(m.root)
            tabs = NoAuthTabs
        end if

        content = createObject("roSGNode", "ContentNode")
        ' Used to measure the width of each tab title
        dummyLabel = createObject("roSGNode", "TabItem")
        ' Spacing between every two columns
        spacing = 40
        columnWidths = []
        bgWidth = 6 ' Give bg some extra padding
        for each item in tabs
            dummyLabel.label = item
            colWidth = dummyLabel.boundingRect().width + spacing
            columnWidths.push(colWidth)
            bgWidth += colWidth + spacing

            content.createchild("ContentNode").title = item
        end for

        grid = m.grid
        grid.itemSpacing = [spacing, 0]
        grid.columnWidths = columnWidths
        grid.content = content

        bg = m.bg
        bg.width = bgWidth
        bg.translation = [(1920 - bgWidth - spacing) / 2, 64]
    end if
end sub

sub onGridFocusChanged()
    grid = m.grid
    tabName = grid.content.getchild(grid.itemFocused).title
    print "[TabRow] Selected tab: "; tabName
    m.top.focusedTabName = tabName
end sub


sub onFocusedTabNameChanged()
    ' Tab might have been set externally. Find the relevant item in the grid and make the grid focus on it
    for i = 0 to m.grid.content.count() - 1
        if m.grid.content.getChild(i).title = m.top.focusedTabName
            m.grid.animateToItem = i
            return
        end if
    end for
end sub
