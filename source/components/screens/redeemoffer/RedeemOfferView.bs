import "pkg:/components/utils/Toast.bs"
import "pkg:/components/utils/RouterUtils.bs"
import "pkg:/components/utils/UrlUtil.bs"
import "pkg:/components/utils/NftOps.bs"
import "pkg:/components/utils/RichText.bs"
import "pkg:/components/stores/stores.bs"

sub init()
    m.image = m.top.findNode("image")
    m.name = m.top.findNode("name")
    m.description = m.top.findNode("description")
    m.fulfillmentStateLabel = m.top.findNode("fulfillmentState")
    m.dateRange = m.top.findNode("dateRange")
    m.redeemButton = m.top.findNode("redeem_btn")
    m.redeemButton.observeFieldScoped("buttonSelected", "onRedeemClicked")

    m.imageShimmer = m.top.findNode("image_shimmer")
    m.image.observeFieldScoped("loadStatus", "onImageLoadStatusChanged")
end sub

sub onOfferChanged()
    offer_uid = m.top.offer_uid
    offers = stores.redeemableOffers().offers[offer_uid.nftUid] ?? []
    offer = invalid
    for each o in offers
        if o.offerId = offer_uid.offerId
            offer = o
            exit for
        end if
    end for

    m.offer = offer
    if offer = invalid
        ' Shouldn't really happen, but protect against bad values anyway
        Toast.show("Offer not found.")
        ' the "close" property might not be observed yet by ViewManager.
        ' Queue this action to make sure the View is already added to stack before trying to close it.
        time.setTimer(sub()
            m.top.close = true
        end sub, 0.001)
    else
        stores.redeemableOffers().unobserveFieldScoped("offers")
        stores.redeemableOffers().observeFieldScoped("offers", "onOfferChanged")
        updateState(offer)
    end if
end sub

sub updateState(offer)
    m.name.text = offer.name
    m.description.text = RichText.stripFormatting(offer.description)
    m.image.uri = UrlUtil.appendQuery(NftOps.assetLinkToUrl(offer.posterImagePath ?? offer.imagePath), "height", m.image.height)

    fulfillmentState = OfferOps.getFulfillmentState(offer)
    if fulfillmentState = OfferOps.FulfillmentState.EXPIRED
        m.fulfillmentStateLabel.text = "OFFER EXPIRED"
        m.fulfillmentStateLabel.color = "#F34242"
    else if fulfillmentState = OfferOps.FulfillmentState.AVAILABLE or fulfillmentState = OfferOps.FulfillmentState.UNRELEASED
        m.fulfillmentStateLabel.text = "OFFER VALID"
        m.fulfillmentStateLabel.color = "#FFD541"
    else if fulfillmentState = OfferOps.FulfillmentState.CLAIMED_BY_PREVIOUS_OWNER
        m.fulfillmentStateLabel.text = "CLAIMED BY PREVIOUS OWNER"
        m.fulfillmentStateLabel.color = "#F34242"
    end if

    m.dateRange.text = OfferOps.getDateRangeString(offer)

    setupButton(offer, fulfillmentState)
end sub

sub setupButton(offer, fulfillmentState)
    m.redeemButton.visible = fulfillmentState = OfferOps.FulfillmentState.AVAILABLE

    if offer.status = RedeemStatus.REDEEMED_BY_CURRENT_USER
        m.redeemButton.text = "View"
    else if offer.status = RedeemStatus.REDEEMING
        m.redeemButton.text = "Redeeming..."
    else if offer.status = RedeemStatus.REDEEM_FAILED or offer.status = RedeemStatus.UNREDEEMED
        m.redeemButton.text = "Redeem Now"
    else if offer.status = RedeemStatus.REDEEMED_BY_ANOTHER_USER
        m.redeemButton.text = ""
    end if

    ' TODO: disable button during redemption
end sub

sub onRedeemClicked()
    if m.offer.transaction = invalid
        ' init redemption
        promises.chain(stores.redeemableOffers()@.initiateRedemption(m.offer)).then(sub (response)
            if response.code = 200
                time.setTimer(pollRedemptionStatusUntilComplete, 2)
            end if
        end sub).catch(sub (e)
            print "Error in redemption/fulfillment", e
            Toast.show("Something went wrong. Please try again later.")
        end sub)
    else
        qrView = createObject("roSGNode", "FulfillmentQrDialog")
        qrView.transactionHash = m.offer.transaction
        createObject("roSGNode", "FullscreenDialog").showView = qrView
    end if
end sub

sub pollRedemptionStatusUntilComplete()
    promises.chain(stores.redeemableOffers()@.refreshRedeemedOffers()).then(sub(offers)
        print "polled offers", offers
        for each o in offers
            if o.offerId = m.offer.offerId
                print "new offer status ", o.status
                if o.status = RedeemStatus.REDEEMING
                    ' Queue another poll if we're still redeeming
                    time.setTimer(pollRedemptionStatusUntilComplete, 2)
                end if
            end if
        end for
    end sub)
end sub

sub onImageLoadStatusChanged()
    if m.image.loadStatus = "ready"
        m.imageShimmer.control = "stop"
    end if
end sub
