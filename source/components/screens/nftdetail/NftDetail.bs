import "pkg:/components/http/http.bs"
import "pkg:/components/utils/NftOps.bs"
import "pkg:/components/utils/RouterUtils.bs"
import "pkg:/components/stores/stores.bs"
import "pkg:/components/utils/UrlUtil.bs"
import "pkg:/components/utils/RichText.bs"

sub init()
    m.card = m.top.findNode("card")
    m.gotoProperty = m.top.findNode("gotoProperty")
    m.tabTitleContainer = m.top.findNode("tabTitleContainer")
    m.tabContentContainer = m.top.findNode("tabContentContainer")
    m.descriptionTabTitle = m.top.findNode("descriptionTabTitle")
    m.mintInfoTabTitle = m.top.findNode("mintInfoTabTitle")
    m.nftTemplateInfoTabTitle = m.top.findNode("nftTemplateInfoTabTitle")

    m.descriptionTabTitle.addFields({ tabContentName: "DescriptionTabContent" })
    m.mintInfoTabTitle.addFields({ tabContentName: "MintInfoTabContent" })
    m.nftTemplateInfoTabTitle.addFields({ tabContentName: "ContractTabContent" })

    m.tabTitles = [m.descriptionTabTitle, m.mintInfoTabTitle, m.nftTemplateInfoTabTitle]
    tabIndex = -1
    for each tabTitle in m.tabTitles
        tabIndex++
        underline = createUnderline(tabTitle)
        tabTitle.addFields({ underline: underline, tabIndex: tabIndex })
        observe(tabTitle, "focusedChild", onTabFocusChanged)
    end for

    observe(m.tabTitleContainer, "focusedChild", onSelectedTabChanged)

    observe(m.gotoProperty, "buttonSelected", sub ()
        view = CreateObject("roSGNode", "PropertyDetail")
        ' Assume the button is only clickable because propertyId exists
        view.linkData = { propertyId: m.propertyId }
        router()@.show({ view: view })
    end sub)
end sub

sub onNftItemChanged()
    ' At this point, our other apps observe ContentStore for live updates of this NFT.
    ' For Roku, we can just hold onto the node as it was clicked and display it "statically".
    ' This is fine because the NFT details shouldn't really change frequently, or as you're observing it.
    ' And also, Roku sucks and it's annoying and painful to do it, so I'll pass for now.
    nft = m.top.nft.sourceNft

    m.card.itemContent = NftOps.nftsToContentNode([nft]).getChild(0)

    m.propertyId = nft.nft_template?.bundled_property_id
    m.gotoProperty.visible = strNotEmpty(m.propertyId)

    onSelectedTabChanged()
end sub

sub onTabFocusChanged(event)
    node = event.getRoSGNode()
    if node.IsInFocusChain()
        m.top._selectedTabIndex = node.tabIndex
    end if
end sub

sub onSelectedTabChanged()
    index = m.top._selectedTabIndex
    tabIndex = -1
    nextTabContentName = invalid
    for each tabTitle in m.tabTitles
        tabIndex++
        if tabIndex = index
            nextTabContentName = tabTitle.tabContentName
        end if

        if tabIndex = index and m.tabTitleContainer.IsInFocusChain()
            tabTitle.color = "#ffffff"
        else
            tabTitle.color = "#7B7B7B"
        end if

        tabTitle.underline.visible = tabIndex = index
        tabTitle.underline.color = tabTitle.color
    end for

    currentTabName = m.tabContentContainer.getChild(0)?.subtype?()
    if currentTabName <> nextTabContentName
        m.tabContentContainer.removeChildIndex(0)
        tabContent = CreateObject("roSGNode", nextTabContentName)
        tabContent.width = m.tabContentContainer.width
        tabContent.height = m.tabContentContainer.height
        ' Set size before setting nft
        if m.top.nft <> invalid
            tabContent.nft = m.top.nft
        end if
        m.tabContentContainer.appendChild(tabContent)
    end if
end sub

function createUnderline(labelNode)
    rect = labelNode.boundingRect()
    underline = labelNode.createChild("Rectangle")
    underline.color = labelNode.color
    underline.width = rect.width
    underline.height = 3
    underline.translation = [0, rect.height + 6]
    underline.visible = false
    return underline
end function

function onKeyEvent(key as string, press as boolean) as boolean
    handled = false
    if press
        if m.initialFocusHandled = invalid
            m.initialFocusHandled = true
            m.descriptionTabTitle.setFocus(true)
            handled = true
        else if m.gotoProperty.IsInFocusChain()
            if key = "up" or key = "right"
                m.descriptionTabTitle.setFocus(true)
                handled = true
            end if
        else if m.descriptionTabTitle.IsInFocusChain()
            if key = "right"
                m.mintInfoTabTitle.setFocus(true)
                handled = true
            else if (key = "left" or key = "down") and m.gotoProperty.visible
                m.gotoProperty.setFocus(true)
                handled = true
            end if
        else if m.mintInfoTabTitle.IsInFocusChain()
            if key = "left"
                m.descriptionTabTitle.setFocus(true)
                handled = true
            else if key = "right"
                m.nftTemplateInfoTabTitle.setFocus(true)
                handled = true
            end if
        else if m.nftTemplateInfoTabTitle.IsInFocusChain()
            if key = "left"
                m.mintInfoTabTitle.setFocus(true)
                handled = true
            end if
        end if
    end if
    return handled
end function
