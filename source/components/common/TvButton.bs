import "pkg:/components/utils/FontStyles.bs"

sub init()
    m.top.iconUri = ""
    m.top.focusedIconUri = ""
    m.top.focusBitmapUri = "pkg:/images/button_focused.9.png"
    m.top.showFocusFootprint = true
    m.top.focusFootprintBitmapUri = "pkg:/images/button_unfocused.9.png"
    m.selectedScaleAnim = m.top.findNode("selectedScaleAnimation")
    m.selectedFieldInterpolator = m.top.findNode("selectedFieldInterpolator")

    m.focusScaleAnim = m.top.findNode("focusScaleAnimation")
    m.focusFieldInterpolator = m.top.findNode("focusFieldInterpolator")

    ' Find the label. Center text
    for i = 0 to m.top.getChildCount() - 1
        child = m.top.getChild(i)
        if child.subtype() = "Label"
            child.horizAlign = "center"
            child.observeField("horizAlign", "onHorizAlignChanged")
            exit for
        end if
    end for
    onFontStyleChanged()

    ' Wait for the parent to give the root element an ID before we can bind it to the animations
    ' That has the side-effect of buttons without an ID not behaving the same, but that shouldn't be a problem.
    m.top.observeField("id", "onRootIdChange")
    m.top.observeField("buttonSelected", "onClick")
    m.top.observeField("focusedChild", "onFocus")
    m.top.observeFieldScoped("text", "updateVerticalPadding")
end sub

sub onFontStyleChanged()
    font = FontStyles.getFontForStyle(m.top.fontStyle)
    m.top.textFont = font
    m.top.focusedTextFont = font
    updateVerticalPadding()
end sub

sub updateVerticalPadding()
    for i = 0 to m.top.getChildCount() - 1
        child = m.top.getChild(i)
        if child.subtype() = "Label"
            labelRect = child.boundingRect()
            m.top.height = labelRect.height + 15
            exit for
        end if
    end for
end sub

sub onHorizAlignChanged(msg as object)
    label = msg.getRoSGNode()
    if label.horizAlign <> "center"
        label.horizAlign = "center"
    end if
end sub

sub onRootIdChange()
    if (m.top.id = invalid) return
    field = `${m.top.id}.scale`
    m.focusFieldInterpolator.fieldToInterp = field
    m.selectedFieldInterpolator.fieldToInterp = field
end sub

sub onClick()
    m.selectedScaleAnim.control = "start"
end sub

sub onFocus()
    focused = m.top.hasFocus()
    m.focusFieldInterpolator.reverse = not focused
    boundingRect = m.top.boundingRect()
    m.top.scaleRotateCenter = [boundingRect.width / 2, boundingRect.height / 2]
    m.focusScaleAnim.control = "start"
end sub