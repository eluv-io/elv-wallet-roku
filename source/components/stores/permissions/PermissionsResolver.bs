' Mostly copied from Android.
' The resolved permissions are stored in the permission object under [._content / ._page / ._property / ._search]
namespace PermissionResolver
    'Recursively resolves permissions and updates entities with resolved permissions.
    ' @param item can be anything that has .permissions
    ' @param parentPermissions optional parent's resolved permission object
    ' @param permissionStates the Property level set of every permission_item_id and whether or not the user is authorized to it or not
    sub resolvePermissions(item, parentPermissions, permissionStates)
        _sanitizePermissions(item)

        ' Special cases
        if (resolveSpecialPermissions(item.permissions, permissionStates))
            Logger.log(`Short-circuiting content permission resolution for ${item}`)
            return
        end if

        resolveContentPermissions(item, parentPermissions, permissionStates)

        ' Iterate children and update their permissions too
        children = _getPermissionedChildren(item)
        for each child in children
            if child <> invalid
                resolvePermissions(child, item.permissions._content, permissionStates)
            end if
        end for
    end sub

    ' @return true if we can short-circuit the content permission resolution process.
    function resolveSpecialPermissions(permissions, permissionStates) as boolean
        if permissions.property_permissions <> invalid
            propertyPermissions = {
                permission_item_ids: permissions.property_permissions,
                behavior: permissions.property_permissions_behavior
                alternate_page_id: permissions.property_permissions_alternate_page_id,
                secondary_market_purchase_option: permissions.property_permissions_secondary_market_purchase_option
            }
            permissions._property = merge(
            propertyPermissions,
            invalid,
            permissionStates
            )
            ' An in-accessible property could still render a Page, so we can't short-circuit here.
            return false
        else if permissions.page_permissions <> invalid
            pagePermissions = {
                permission_item_ids: permissions.page_permissions,
                behavior: permissions.page_permissions_behavior
                alternate_page_id: permissions.page_permissions_alternate_page_id,
                secondary_market_purchase_option: permissions.page_permissions_secondary_market_purchase_option
            }
            permissions._page = merge(
            pagePermissions,
            invalid,
            permissionStates
            )
            ' In the case of an unauthorized page, we can save ourselves from checking any content
            ' permissions, because none of that content will be visible to the user
            return permissions._page.authorized = false
        end if
        return false
    end function

    ' Updates [item] with resolved permissions.
    function resolveContentPermissions(item, parentPermissions, permissionStates)
        if (parentPermissions = invalid)
            ' top level, resolve with [item] as parent.
            if item.permissions <> invalid
                item.permissions._content = merge(
                item.permissions,
                invalid,
                permissionStates
                )
            end if
        else
            item.permissions._content = merge(
            parentPermissions,
            item.permissions,
            permissionStates
            )
        end if
    end function

    ' Returns a new [CompositePermissions] with merged permissions.
    ' Note that [parent] and [child] are not treated equally, and parent permissions take over
    ' once we hit an unauthorized state.
    function merge(parent, child, permissionStates)
        if child = invalid
            ' Child has nothing defined, [authorized] will be the same as the parent's,
            ' unless it still needs to be calculated.
            return CompositePermissions(parent.authorized ?? isAuthorized(parent, permissionStates), parent, parent)
        end if

        if parent.authorized = false
            ' Parent is not authorized, everything down the line is not authorized
            ' and will inherit behavior, unless it's not already set.
            return CompositePermissions(false, parent, child)
        end if

        ' Parent is authorized, child will have to check its own permissions.
        ' Child fields take precedence over parent fields.
        return CompositePermissions(isAuthorized(child, permissionStates), child, parent)
    end function

    function CompositePermissions(authorized as boolean, primary, fallback)
        if primary.permission_item_ids <> invalid and primary.permission_item_ids.count() > 0
            items = primary.permission_item_ids
        else
            items = fallback.permission_item_ids
        end if
        return {
            authorized: authorized,
            permission_item_ids: items,
            behavior: strNotEmpty(primary.behavior) ? primary.behavior : fallback.behavior,
            alternate_page_id: strNotEmpty(primary.alternate_page_id) ? primary.alternate_page_id : fallback.alternate_page_id,
            secondary_market_purchase_option: strNotEmpty(primary.secondary_market_purchase_option) ? primary.secondary_market_purchase_option : fallback.secondary_market_purchase_option,
        }
    end function

    function isAuthorized(permissions, authStates as roAssociativeArray) as boolean
        permissionItems = permissions.permission_item_ids
        ' If not permissionsed by any items - we're authorized
        if permissionItems = invalid or permissionItems.count() = 0 then return true

        for each item in permissionItems
            if (authStates[item]?.authorized ?? false)
                return true
            end if
        end for
        return false
    end function

    ' Make sure .permissions conforms to the same structure for all items
    function _sanitizePermissions(item)
        ' Make sure there's SOME permission object
        if item.permissions = invalid
            item.permissions = {}
        end if

        ' Media items have a permissions array instead of the same structure as prop/page/section.
        ' Massage it to conform
        if type(item.permissions) = "roArray"
            if item.public = true
                ' Server can still send a non-empty dto.permissions list even if the item is
                ' public. In that case we should ignore the list completely.
                permissionItems = []
            else
                permissionItems = item.permissions
            end if

            ' Map values to the standard structure
            itemIds = []
            for each permissionItem in permissionItems
                if permissionItem.permission_item_id <> invalid
                    itemIds.push(permissionItem.permission_item_id)
                end if
            end for

            item.permissions = {
                permission_item_ids: itemIds
            }
        end if

        if item.permissions.property_permissions = invalid and item.id.startsWith("iq__")
            ' This is a Property, make sure it also has a property_permissions object
            Logger.log(`Found a page without page_permissions, creating default.`)
            item.permissions.property_permissions = {}
        end if

        if item.permissions.page_permissions = invalid and (item.id = "main" or item.id.startsWith("ppge"))
            ' This is a Page, make sure it also has a page_permissions object
            Logger.log(`Found a page without page_permissions, creating default.`)
            item.permissions.page_permissions = {}
        end if
    end function

    ' Returns child objects that also have (or can have) a .permissions field that needs to be resolved
    function _getPermissionedChildren(item)
        children = [
            ' Properties contain their main page
            item.main_page,
        ]

        ' MediaLists have a list of ids under 'media', we don't care about that,
        ' but we DO want SectionItem's 'media' which points to an actual media object
        if type(item.media) = "roAssociativeArray"
            children.push(item.media)
        end if

        ' Sections have SectionItems in .content
        children.append(item.content ?? [])

        ' "container" type Sections will have other "sub sections" in .sections_resolved
        children.append(item.sections_resolved ?? [])

        return children
    end function
end namespace
