import "pkg:/components/http/apis/PropertyApi.bs"
import "pkg:/components/utils/str.bs"
import "pkg:/components/stores/permissions/PermissionsResolver.bs"
import "pkg:/components/utils/Logger.bs"
import "pkg:/components/utils/promise.bs"

function fetchDiscoverableProperties(_ = invalid)
    Logger.log("Starting Discover Property fetch")
    return promises.onThen(
    PropertyApi.discoverableProperties(),
    sub (result)
        properties = result.json.contents ?? []

        ' Skip permission resolution if not logged in
        if strNotEmpty(stores.tokenStore().fabricToken)
            for each item in properties
                PermissionResolver.resolvePermissions(item, invalid, item.permission_auth_state)
            end for
        end if

        m.top.properties = properties
        Logger.log("Properties fetched and saved")
    end sub)
end function

function fetchSections(property, page)
    Logger.log(source_function_name)
    context = {
        key: `${property.id}_${page.id}`
        pageContentPermissions: page.permissions._content,
        authStates: property.permission_auth_state
    }
    return promises.chain(
    PropertyApi.sectionsById(property.id, page.layout.sections),
    context
    ).then(sub(response, context)
        sections = response.json.contents
        for each section in sections
            try
                PermissionResolver.resolvePermissions(section, context.pageContentPermissions, context.authStates)
            catch e
                Logger.log(`Error parsing permissions for section ${section.id}`)
            end try
        end for
        Logger.log(`Saved sections for ${context.key}`)
        allSections = m.top.sections
        allSections[context.key] = sections
        m.top.sections = allSections
    end sub)
end function