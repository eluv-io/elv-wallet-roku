import "pkg:/components/http/apis/PropertyApi.bs"
import "pkg:/components/utils/str.bs"
import "pkg:/components/stores/permissions/PermissionsResolver.bs"
import "pkg:/components/utils/Logger.bs"
import "pkg:/components/utils/promise.bs"

sub init()
    ' m.top.properties is an array of properties that show up on the Discover page.
    ' m.propertyMap is a cache of ALL properties keyed by their IDs.
    ' This includes properties individually fetched (e.g. from links or subproperty switching)
    m.propertyMap = {}
end sub

function fetchDiscoverableProperties(_ = invalid)
    Logger.log("Starting Discover Property fetch")
    return promises.onThen(
    PropertyApi.discoverableProperties(),
    sub (result)
        properties = result.json.contents ?? []
        propertyMap = {}

        ' Skip permission resolution if not logged in
        shouldResolvePermissions = strNotEmpty(stores.tokenStore().fabricToken)
        for each item in properties
            propertyMap[item.id] = item
            if shouldResolvePermissions
                PermissionResolver.resolvePermissions(item, invalid, item.permission_auth_state)
            end if
        end for

        m.propertyMap = propertyMap
        m.top.properties = properties
        Logger.log("Properties fetched and saved")
    end sub)
end function

' Returns a Promise that will resolve to a Property object.
' Property is only fetched from network if it's not in cache.
function getPropertyById(propertyId)
    cachedProperty = m.propertyMap?.lookup?(propertyId)
    if cachedProperty <> invalid
        Logger.log(`Property found in cache, not fetching from network. (id=${propertyId})`)
        return promises.resolve(cachedProperty)
    end if

    ' Property not in cache - fetch it from network
    return promises.onThen(PropertyApi.getPropertyById(propertyId),
    function(result)
        property = result.json
        Logger.log(`Fetched property from network (id=${property.id})`)
        propMap = m.propertyMap
        propMap[property.id] = property
        m.propertyMap = propMap
        return property
    end function
    )
end function

function fetchSections(property, page)
    Logger.log(source_function_name)
    context = {
        key: `${property.id}_${page.id}`
        pageContentPermissions: page.permissions._content,
        authStates: property.permission_auth_state
    }
    return promises.chain(
    PropertyApi.sectionsById(property.id, page.layout.sections),
    context
    ).then(sub(response, context)
        sections = response.json.contents
        for each section in sections
            try
                PermissionResolver.resolvePermissions(section, context.pageContentPermissions, context.authStates)
            catch e
                Logger.log(`Error parsing permissions for section ${section.id}`)
            end try
        end for
        Logger.log(`Saved sections for ${context.key}`)
        allSections = m.top.sections
        allSections[context.key] = sections
        m.top.sections = allSections
    end sub)
end function