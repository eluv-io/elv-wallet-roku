import "pkg:/components/stores/stores.bs"
import "pkg:/components/utils/Base58.bs"
import "pkg:/components/stores/Env.bs"
import "pkg:/components/http/http.bs"

const TOKEN_REGISTRY_SECTION = "tokens"

const PERSISTED_FIELDS = ["fabricToken", "walletAddress", "refreshToken", "email", "clusterToken"]

const ORY_API_URL = "https://eloquent-carson-yt726m2tf6.projects.oryapis.com"

sub init()
    m.registry = createObject("roRegistrySection", TOKEN_REGISTRY_SECTION)
    keepFieldsSyncedWithRegistry(PERSISTED_FIELDS)
end sub

sub wipe(_ = invalid)
    for each field in PERSISTED_FIELDS
        m.top[field] = invalid
    end for
end sub

' All [trackedFields] must be values in m.top.
' This methods reads the current registry and sets the corresponding fields in m.top.
' Then it indefinitely observes changes to these fields and writes them to registry as they change.
sub keepFieldsSyncedWithRegistry(trackedFields as roArray)
    values = m.registry.readMulti(trackedFields)
    for each field in trackedFields
        print `[TokenStore] restore token: ${field}=${values[field]}`
        m.top[field] = values[field]
        m.top.observeField(field, "onTrackedFieldChange")
    end for
end sub

sub onTrackedFieldChange(message)
    field = message.getField()
    data = message.getData()
    print `[TokenStore] Detected token change. Persisting ${field}=${data}`
    m.registry.write(field, data)
    m.registry.flush()
end sub

function GetActivationData(_ = invalid) as object
    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    return http.post(`${baseUrl}/wlt/login/redirect/metamask`, {
        op: "create",
        ' This is hardcoded to the Main network, will not work on Demo
        dest: `${Env.walletUrl()}?action=login&mode=login&response=code&source=code#/login`
    })
end function

' checks if auth has completed for the given code and passcode.
function checkAuthorization(code, passcode) as object
    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    return promises.chain(http.get(`${baseUrl}/wlt/login/redirect/metamask/${code}/${passcode}`)).then(function(response)
        if response.code = 200
            payload = parseJson(response.json.payload)
            m.top.fabricToken = payload.token
            m.top.clusterToken = payload.clusterToken
            m.top.walletAddress = payload.addr
            m.top.userEmail = payload.email
        end if
        return response
    end function).toPromise()
end function

' Called after id token is set
function fetchFabricToken(tenantId as string)
    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    context = { baseUrl: baseUrl, tid: tenantId }
    return promises.chain(http.post(`${baseUrl}/wlt/login/jwt`, { ext: { share_email: true } }), context).then(
    function(response, context)
        m.top.clusterToken = response.json.token
        m.top.walletAddress = response.json.addr
        print "saved cluster token", m.top.clusterToken
        print "saved wallet address", m.top.walletAddress

        ' Get fabricToken from server. "clusterToken" will be embedded in the headers by HttpTask.
        channelId = createObject("roDeviceInfo").GetChannelClientId()
        return http.post(`${context.baseUrl}/wlt/sign/csat`, { tid: context.tid, nonce: channelId, force: true })
    end function).then(function(response, context)
        m.top.fabricToken = response.json.token
        return "success"
    end function
    ).toPromise()
end function

function passwordAuth(email, password, property, isSignUp as boolean)
    if strNullOrEmpty(email) then return promises.reject({ message: "Empty email/username" })
    if strNullOrEmpty(password) then return promises.reject({ message: "Empty password" })

    tenantId = property?.tenant?.tenant_id
    if strNullOrEmpty(tenantId) then return promises.reject({ message: "invalid tenant_id" })

    context = {
        email: email
        password: password
        baseUrl: stores.fabricConfigStore()@.getAuthdBaseUrl()
        tenantId: tenantId
        isSignUp: isSignUp
        property: property
    }

    if isSignUp
        url = `${ORY_API_URL}/self-service/registration/api`
    else
        url = `${ORY_API_URL}/self-service/login/api`
    end if
    return promises.chain(http.get(url), context).then(function(initFlowResponse, context)
        flowId = initFlowResponse.json.id
        if strNullOrEmpty(flowId) then return promises.reject({ message: "fail to obtain ory-flow-id" })
        if context.isSignUp
            url = `${ORY_API_URL}/self-service/registration?flow=${flowId}`
            body = {
                "method": "password",
                "traits": { "email": context.email },
                "password": context.password
            }
        else
            url = `${ORY_API_URL}/self-service/login?flow=${flowId}`
            body = {
                "method": "password",
                "identifier": context.email,
                "password": context.password
            }
        end if
        return http.post(url, body)
    end function).then(function(authResponse, context)
        if strNullOrEmpty(authResponse.json.session_token)
            return promises.reject({ message: "Failed to get session token from Ory", reason: authResponse.json?.ui?.messages?[0]?.id })
        end if
        m.top.idToken = authResponse.json.session_token
        return http.get(`${ORY_API_URL}/sessions/whoami?tokenize_as=jwt_uefa_template1`)
    end function).then(function(whoamiRepsonse, context)
        if strNullOrEmpty(whoamiRepsonse.json.tokenized) then return promises.reject({ message: "Failed to get token from Ory" })
        m.top.idToken = whoamiRepsonse.json.tokenized
        m.top.userEmail = _extractEmail(whoamiRepsonse.json.tokenized)
        body = {
            ' We currently don't have tenant_id, and it would be nice to add it, but it's not required
            ' "tid": context.tenantId '
            "ext": { "share_email": true }
        }
        return http.post(`${context.baseUrl}/wlt/login/jwt`, body)
    end function).then(function(jwtResponse, context)
        if strNullOrEmpty(jwtResponse.json.token) or strNullOrEmpty(jwtResponse.json.addr) then return promises.reject({ message: "Failed to get JWT" })
        m.top.clusterToken = jwtResponse.json.token
        m.top.walletAddress = jwtResponse.json.addr
        body = {
            ' We currently don't have tenant_id, and it would be nice to add it, but it's not required
            ' "tid": context.tenantId,
            "nonce": createObject("roDeviceInfo").GetChannelClientId()
        }
        return http.post(`${context.baseUrl}/wlt/sign/csat`, body)
    end function).then(function(csatResponse, context)
        if strNullOrEmpty(csatResponse.json.token) then return promises.reject({ message: "Failed to sign JWT" })
        m.top.fabricToken = csatResponse.json.token
        return "success"
    end function).then(function(r, context)
        return _sendWelcomeEmail(context.baseUrl, context.email, context.property, r)
    end function).catch(function(e, context)
        Logger.log(`Sign up/in error: ${e}`)
        ' Clear all fields we might have touched, and then send the same error forward
        m.top.idToken = invalid
        m.top.userEmail = invalid
        m.top.clusterToken = invalid
        m.top.walletAddress = invalid
        m.top.fabricToken = invalid
        return promises.reject(e)
    end function).toPromise()
end function

' Asks the BE to send a welcome email to the user.
' Returns a promise that will complete successfully and return [originalResponse] regardless of any errors that occured,
' since we don't want to change the flow if this one step fails.
function _sendWelcomeEmail(baseUrl, email, property, originalResponse)
    url = `${baseUrl}/wlt/ory/send_welcome_email`
    body = {
        email: email,
        media_property: property?.id
    }
    return promises.chain(http.post(url, body), originalResponse).then(function(r, originalResponse)
        return promises.resolve(originalResponse)
    end function).catch(function(e, originalResponse)
        Logger.log(`Failed to send welcome email: ${e}`)
        return promises.resolve(originalResponse)
    end function).toPromise()
end function

function _extractEmail(idToken)
    encodedId = idToken?.split?(".")?[1]
    if strNotEmpty(encodedId)
        size = encodedId.len()
        ' Pad string until divisible by 4, otherwise FromBase64String will break
        if size mod 4 <> 0 then encodedId += string(4 - (size mod 4), "=")      
        ba = CreateObject("roByteArray")
        ba.FromBase64String(encodedId)
        idJson = parseJson(ba.ToAsciiString())
        return idJson.email
    end if
end function
