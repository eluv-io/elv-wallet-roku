import "pkg:/components/stores/stores.bs"
import "pkg:/components/utils/Base58.bs"
import "pkg:/components/stores/Env.bs"
import "pkg:/components/http/http.bs"

const TOKEN_REGISTRY_SECTION = "tokens"

const PERSISTED_FIELDS = ["fabricToken", "walletAddress", "refreshToken", "email", "clusterToken"]

const ORY_API_URL = "https://eloquent-carson-yt726m2tf6.projects.oryapis.com"

sub init()
    m.registry = createObject("roRegistrySection", TOKEN_REGISTRY_SECTION)
    keepFieldsSyncedWithRegistry(PERSISTED_FIELDS)
end sub

sub wipe(_ = invalid)
    for each field in PERSISTED_FIELDS
        m.top[field] = invalid
    end for
end sub

' All [trackedFields] must be values in m.top.
' This methods reads the current registry and sets the corresponding fields in m.top.
' Then it indefinitely observes changes to these fields and writes them to registry as they change.
sub keepFieldsSyncedWithRegistry(trackedFields as roArray)
    values = m.registry.readMulti(trackedFields)
    for each field in trackedFields
        print `[TokenStore] restore token: ${field}=${values[field]}`
        m.top[field] = values[field]
        m.top.observeField(field, "onTrackedFieldChange")
    end for
end sub

sub onTrackedFieldChange(message)
    field = message.getField()
    data = message.getData()
    print `[TokenStore] Detected token change. Persisting ${field}=${data}`
    m.registry.write(field, data)
    m.registry.flush()
end sub

function GetActivationData(_ = invalid) as object
    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    return http.post(`${baseUrl}/wlt/login/redirect/metamask`, {
        op: "create",
        ' This is hardcoded to the Main network, will not work on Demo
        dest: `${Env.walletUrl()}?action=login&mode=login&response=code&source=code#/login`
    })
end function

' checks if auth has completed for the given code and passcode.
function checkAuthorization(code, passcode) as object
    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    return promises.chain(http.get(`${baseUrl}/wlt/login/redirect/metamask/${code}/${passcode}`)).then(function(response)
        if response.code = 200
            payload = parseJson(response.json.payload)
            m.top.fabricToken = payload.token
            m.top.clusterToken = payload.clusterToken
            m.top.walletAddress = payload.addr
            m.top.userEmail = payload.email
        end if
        return response
    end function).toPromise()
end function

' Called after id token is set
function fetchFabricToken(tenantId as string)
    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    context = { baseUrl: baseUrl, tid: tenantId }
    return promises.chain(http.post(`${baseUrl}/wlt/login/jwt`, { ext: { share_email: true } }), context).then(
    function(response, context)
        m.top.clusterToken = response.json.token
        m.top.walletAddress = response.json.addr
        print "saved cluster token", m.top.clusterToken
        print "saved wallet address", m.top.walletAddress

        ' Get fabricToken from server. "clusterToken" will be embedded in the headers by HttpTask.
        channelId = createObject("roDeviceInfo").GetChannelClientId()
        return http.post(`${context.baseUrl}/wlt/sign/csat`, { tid: context.tid, nonce: channelId, force: true })
    end function).then(function(response, context)
        m.top.fabricToken = response.json.token
        return "success"
    end function
    ).toPromise()
end function

function passwordAuth(email, password, property, isSignUp as boolean)
    if strNullOrEmpty(email) then return promises.reject({ message: "Empty email/username" })
    if strNullOrEmpty(password) then return promises.reject({ message: "Empty password" })

    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    if isSignUp
        url = `${baseUrl}/wlt/ory/sign_up`
    else
        url = `${baseUrl}/wlt/ory/sign_in`
    end if
    
    body = {
        email: email
        password: password
        media_property: property.id
        nonce: createObject("roDeviceInfo").GetChannelClientId()
    }

    return promises.chain(http.post(url, body)).then(function(response)
        Logger.log(`Sign up/in response: ${response.json}`)
        if response.code = 200
            m.top.fabricToken = response.json.fabric_token
            m.top.clusterToken = response.json.cluster_token
            m.top.userEmail = response.json.email
            m.top.walletAddress = response.json.user_addr
            return "success"
        else
            return promises.reject({ reason: response.json?.error?.messages?[0]?.id ?? response.json })
        end if
    end function).catch(function(e)
        Logger.log(`Sign up/in error: ${e}`)
        ' Clear all fields we might have touched, and then send the same error forward
        m.top.idToken = invalid
        m.top.userEmail = invalid
        m.top.clusterToken = invalid
        m.top.walletAddress = invalid
        m.top.fabricToken = invalid
        return promises.reject(e)
    end function).toPromise()
end function
