import "pkg:/components/stores/stores.bs"
import "pkg:/components/utils/Base58.bs"
import "pkg:/components/http/http.bs"

const AUTH0_BASE_URL = "https://prod-elv.us.auth0.com/"
const AUTH0_CLIENT_ID = "***REMOVED***"

const TOKEN_REGISTRY_SECTION = "tokens"

const PERSISTED_FIELDS = ["fabricToken", "walletAddress"]

sub init()
    m.registry = createObject("roRegistrySection", TOKEN_REGISTRY_SECTION)
    keepFieldsSyncedWithRegistry(PERSISTED_FIELDS)
end sub

sub wipe(_ = invalid)
    for each field in PERSISTED_FIELDS
        m.top[field] = invalid
    end for
end sub

' All [trackedFields] must be values in m.top.
' This methods reads the current registry and sets the corresponding fields in m.top.
' Then it indefinitely observes changes to these fields and writes them to registry as they change.
sub keepFieldsSyncedWithRegistry(trackedFields as roArray)
    values = m.registry.readMulti(trackedFields)
    for each field in trackedFields
        print `[TokenStore] restore token: ${field}=${values[field]}`
        m.top[field] = values[field]
        m.top.observeField(field, "onTrackedFieldChange")
    end for
end sub

sub onTrackedFieldChange(message)
    field = message.getField()
    data = message.getData()
    print `[TokenStore] Detected token change. Persisting ${field}=${data}`
    m.registry.write(field, data)
    m.registry.flush()
end sub

function GetActivationData(_ = invalid) as object
    return http.post(`${AUTH0_BASE_URL}oauth/device/code`, {
        client_id: AUTH0_CLIENT_ID,
        scope: "openid profile email offline_access"
    })
end function

function checkToken(deviceCode) as object
    httpPromise = http.post(`${AUTH0_BASE_URL}oauth/token`, {
        client_id: AUTH0_CLIENT_ID,
        grant_type: "urn:ietf:params:oauth:grant-type:device_code"
        device_code: deviceCode
    })

    return promises.onThen(httpPromise, sub(response) as object
        if response.code = 200
            m.top.idToken = response.json.id_token
            m.top.accessToken = response.json.access_token
            m.top.refreshToken = response.json.refresh_token
        end if
        return response
    end sub)
end function
