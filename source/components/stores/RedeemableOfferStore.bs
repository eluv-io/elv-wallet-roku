import "pkg:/components/http/http.bs"
import "pkg:/components/utils/Time.bs"
import "pkg:/components/stores/RedeemStatusEnum.bs"
import "pkg:/components/http/apis/GatewayApi.bs"
import "pkg:/components/stores/stores.bs"

const REDEEM_OPERATION = "nft-offer-redeem"

sub init()
    m.top.offers = {}
end sub

' Returns a Promise that will include offers for the [nft] with their "true" RedeemStatuses.
function refreshRedeemedOffers(contract, tokenId) as object
    nft = stores.contentStore()@.findNft(contract, tokenId)
    if nft = invalid
        return promises.reject(`No NFT found for contract=${contract} token=$${tokenId}`)
    end if
    baseUrl = stores.fabricConfigStore()@.getAuthdBaseUrl()
    context = {
        baseUrl: baseUrl
        nft: nft
    }
    return promises.chain(http.get(`${baseUrl}/nft/info/${nft.contract_addr}/${nft.token_id_str}`), context).then(function(response, context)
        context.nftInfo = response.json
        tenant = context.nftInfo.tenant
        return http.get(`${context.baseUrl}/wlt/status/act/${tenant}`, true)
    end function).then(function(response, context)
        parseRedeemStatuses(response.json.arr, context.nftInfo)
        offers = m.top.offers
        result = combineNftAndInfoOffers(context.nft, context.nftInfo)
        offers[context.nft._uid] = result
        m.top.offers = offers
        return result
    end function).toPromise()
end function

function initiateRedemption(offer)
    clientReferenceId = createObject("roDeviceInfo").getRandomUUID()
    body = {
        client_reference_id: clientReferenceId
        tok_addr: offer.tokenAddress
        tok_id: offer.tokenId
        offer_id: offer.offerId
        op: REDEEM_OPERATION
    }

    ' Optimistic update to REDEEMING
    updateOfferStatus(offer, RedeemStatus.REDEEMING)
    undo = function(response, context)
        ' This will handle exceptions the same as non-200 http responses
        if response.code <> 200 or response.json.err <> invalid
            ' Revert optimism
            print "something went wrong, reverting Offer status to UNREDEEMED"
            updateOfferStatus(context.offer, RedeemStatus.UNREDEEMED)
        end if
        return response
    end function
    return promises.chain(
    GatewayApi.initOfferRedemption(offer.tenant, body), { offer: offer }
    ).then(undo).catch(undo).toPromise()
end function

function getFulfillmentData(transactionHash)
    network = stores.fabricConfigStore()@.getNetworkName()
    return http.get(`https://appsvc.svc.eluv.io/code-fulfillment/${network}/fulfill/${transactionHash}`, true)
end function

' Node fields of type "AA" are immutable, so we have to re-assign m.top.offers to get listeners to be notified.
sub updateOfferStatus(offer, newStatus)
    nftOffers = m.top.offers[offer.nftUid]
    newOffers = []
    for each o in nftOffers
        if o.offerId = offer.offerId
            o.status = newStatus
        end if
        newOffers.push(o)
    end for
    allOffers = m.top.offers
    allOffers[offer.nftUid] = newOffers
    m.top.offers = allOffers
end sub

sub parseRedeemStatuses(redemptionStatuses, nftInfo)
    contract = nftInfo.contract_addr
    if contract.startsWith("0x")
        contract = contract.mid(2)
    end if
    relevantStatuses = {}
    for each status in redemptionStatuses
        'TODO: Come back to this once we actually have things in-flights
        op = status.op.split(":")
        status.operation = op[0]
        status.contract = op[1]
        status.tokenId = op[2]
        status.offerId = op[3]
        if status.operation = REDEEM_OPERATION and status.contract = contract and status.tokenId = nftInfo.token_id_str
            relevantStatuses[`${status.offerId}`] = status.status
        end if
    end for

    for each offer in nftInfo.offers
        status = relevantStatuses[`${offer.offer_idx}`]
        if offer.redeemer <> invalid
            if isOwnedByAnotherUser(offer.redeemer)
                offer.status = RedeemStatus.REDEEMED_BY_ANOTHER_USER
            else
                offer.status = RedeemStatus.REDEEMED_BY_CURRENT_USER
            end if
        else if status = invalid
            offer.status = RedeemStatus.UNREDEEMED
        else if status = "complete"
            offer.status = RedeemStatus.REDEEMED_BY_CURRENT_USER
        else if status = "failed"
            offer.status = RedeemStatus.REDEEM_FAILED
        else if status = ""
            offer.status = RedeemStatus.REDEEMING
        end if
    end for
end sub

' Takes data from both nft_template and nft/info to create a complete RedeemableOffer object.
' Note, nftInfo must already include RedeemStatus after passing thru [parseRedeemStates]
function combineNftAndInfoOffers(nft, nftInfo) as roArray
    offers = []
    for each infoOffer in nftInfo.offers
        for each templateOffer in nft.nft_template.redeemable_offers
            if templateOffer.offer_id = infoOffer.id
                offers.push({
                    nftUid: nft._uid
                    tenant: nftInfo.tenant
                    tokenId: nft.token_id_str
                    tokenAddress: nft.contract_addr
                    offerId: infoOffer.id
                    name: templateOffer.name
                    ' On demov3 some offers use [description_text], but I think Main uses [description]
                    description: templateOffer.description ?? templateOffer.description_text
                    offerId: templateOffer.offer_id
                    imagePath: templateOffer.image
                    posterImagePath: templateOffer.poster_image
                    availableAt: templateOffer.available_at
                    expiresAt: templateOffer.expires_at
                    visibility: templateOffer.visibility
                    transaction: infoOffer.transaction
                    status: infoOffer.status
                })
                continue for
            end if
        end for
    end for
    return offers
end function

function isOwnedByAnotherUser(redeemer as dynamic)
    currentUser = stores.tokenStore().walletAddress

    if currentUser = invalid or redeemer = invalid
        return false
    end if

    redeemer = lcase(redeemer)
    if redeemer.startsWith("0x")
        redeemer = redeemer.mid(2)
    end if

    currentUser = lcase(currentUser)
    if currentUser.startsWith("0x")
        currentUser = currentUser.mid(2)
    end if

    return redeemer <> "" and redeemer <> currentUser
end function
