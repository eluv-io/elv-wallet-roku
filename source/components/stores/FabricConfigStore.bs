import "pkg:/components/utils/Time.bs"
import "pkg:/components/stores/stores.bs"
import "pkg:/components/utils/NodeUtil.bs"
import "pkg:/components/stores/Env.bs"
import "pkg:/components/http/http.bs"

sub init()
    m.registry = createObject("roRegistrySection", "config")
    m.top.observeFieldScoped("config", "onConfigChange")

    observe(stores.envStore(), "currentEnv", onEnvChanged)
    onEnvChanged()

    ' Get pre-loaded config
    m.top.config = m.global.tempConfig
    m.global.tempConfig = invalid
end sub

sub onEnvChanged()
    ?(`Env Changed. Starting to poll config for ${stores.envStore().currentEnv.name}`)

    ' Cancel previous timer, if exists
    lastTimer = m.pollingTimer
    if lastTimer <> invalid
        lastTimer.control = "stop"
    end if

    ' Neverending loop that fetches config.
    m.pollingTimer = time.setTimer(refreshConfig, 180, true)
    refreshConfig()
end sub

sub refreshConfig(_ = invalid)
    ?"Refreshing config"
    promises.onThen(
    http.get(Env.configUrl()),
    sub (result)
        m.top.config = result.json
    end sub)
end sub

sub onConfigChange()
    m.registry.write("config", formatJson(m.top.config))
end sub

function getAuthdBaseUrl(_ = invalid) as string
    return m.top.config.network.services.authority_service[0]
end function

function getFabricBaseUrl(_ = invalid) as string
    config = m.top.config
    return `${config.network.services.fabric_api[0]}/s/${config.qspace.names[0]}`
end function

function getNetworkName(_ = invalid) as string
    return m.top.config.qspace.names[0]
end function
